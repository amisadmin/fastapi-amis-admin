{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"<p>\u7b80\u4f53\u4e2d\u6587 | English</p>"},{"location":"#introduction","title":"Introduction","text":"FastAPI-Amis-Admin  <p> fastapi-amis-admin is a high-performance, efficient and easily extensible FastAPI admin framework. Inspired by Django-admin, and has as many powerful functions as Django-admin. </p> <p> </p> <p> source code   \u00b7   online demo   \u00b7   documentation   \u00b7   can't open the document? </p> <p><code>fastapi-amis-admin</code> is a high-performance and efficient framework based on <code>fastapi</code> &amp; <code>amis</code> with <code>Python 3.7+</code>, and based on standard Python type hints. The original intention of the development is to improve the application ecology and to quickly generate a visual dashboard for the web application . According to the <code>Apache2.0</code> protocol, it is free and open source . But in order to better operate and maintain this project in the long run, I very much hope to get everyone's sponsorship and support.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>High performance: Based on FastAPI. Enjoy all the benefits.</li> <li>High efficiency: Perfect code type hints. Higher code reusability.</li> <li>Support asynchronous and synchronous hybrid writing: <code>ORM</code>  is based on<code>SQLModel</code> &amp; <code>Sqlalchemy</code>. Freely customize   database type. Support synchronous and asynchronous mode. Strong scalability.</li> <li>Front-end separation: The front-end is rendered by <code>Amis</code>, the back-end interface is automatically generated   by <code>fastapi-amis-admin</code>. The interface is reusable.</li> <li>Strong scalability: The background page supports <code>Amis</code> pages and ordinary <code>html</code> pages. Easily customize the   interface freely.</li> <li>Automatic api documentation: Automatically generate Interface documentation by <code>FastAPI</code>. Easily debug and share   interfaces.</li> </ul>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>FastAPI: Finish the web part.</li> <li>SQLModel: Finish <code>ORM</code> model mapping. Perfectly   combine  SQLAlchemy with Pydantic, and have all   their features .</li> <li>Amis: Finish admin page presentation.</li> </ul>"},{"location":"#composition","title":"Composition","text":"<p><code>fastapi-amis-admin</code> consists of three core modules, of which, <code>amis</code>, <code>crud</code> can be used as separate modules, <code>admin</code> is developed by the former.</p> <ul> <li><code>amis</code>: Based on the <code>pydantic</code> data model building library of <code>baidu amis</code>. To generate/parse data rapidly.</li> <li><code>crud</code>: Based on <code>FastAPI</code> &amp;<code>Sqlalchemy</code>. To quickly build Create, Read, Update, Delete common API   interface .</li> <li><code>admin</code>: Inspired by <code>Django-Admin</code>. Combine <code>amis</code> with <code>crud</code>. To quickly build Web Admin   dashboard .</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install fastapi_amis_admin\n</code></pre>"},{"location":"#note","title":"Note","text":"<ul> <li><code>sqlmodel</code> currently does not support <code>sqlalchemy 2.0+</code>. If you use <code>sqlalchemy 2.0+</code> to create a model, you cannot   use <code>sqlmodel</code> at the same time.</li> <li>After version <code>fastapi-amis-admin&gt;=0.6.0</code>, <code>sqlmodel</code> is no longer a required dependency library. If you use <code>sqlmodel</code>   to create a model, you can install it with the following command.</li> </ul> <pre><code>pip install fastapi_amis_admin[sqlmodel]\n</code></pre>"},{"location":"#simple-example","title":"Simple Example","text":"<pre><code>from fastapi import FastAPI\nfrom fastapi_amis_admin.admin.settings import Settings\nfrom fastapi_amis_admin.admin.site import AdminSite\n\n# create FastAPI application\napp = FastAPI()\n\n# create AdminSite instance\nsite = AdminSite(settings=Settings(database_url_async='sqlite+aiosqlite:///amisadmin.db'))\n\n# mount AdminSite instance\nsite.mount_app(app)\n\nif __name__ == '__main__':\n    import uvicorn\n\n    uvicorn.run(app)\n</code></pre>"},{"location":"#modeladmin-example","title":"ModelAdmin Example","text":""},{"location":"#create-model","title":"Create Model","text":"<ul> <li>Support <code>SQLModel</code> model, <code>SQLAlchemy</code> model, <code>SQLAlchemy 2.0</code> model</li> <li>Method 1: Create model through <code>SQLModel</code>.</li> </ul> <pre><code>from sqlmodel import SQLModel\nfrom fastapi_amis_admin.models.fields import Field\n\n\nclass Base(SQLModel):\n    pass\n\n\n# Create an SQLModel, see document for details: https://sqlmodel.tiangolo.com/\nclass Category(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True, nullable=False)\n    name: str = Field(title='CategoryName', max_length=100, unique=True, index=True, nullable=False)\n    description: str = Field(default='', title='Description', max_length=255)\n</code></pre> <ul> <li>Method 2: Create model through <code>SQLAlchemy</code>.</li> </ul> <pre><code>from sqlalchemy import Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\n\n# Create an SQLAlchemy model, see document for details: https://docs.sqlalchemy.org/en/14/orm/tutorial.html\nclass Category(Base):\n    __tablename__ = 'category'\n    # Specify the Schema class corresponding to the model. It is recommended to specify it. If omitted, it can be automatically generated.\n    __pydantic_model__ = CategorySchema\n\n    id = Column(Integer, primary_key=True, nullable=False)\n    name = Column(String(100), unique=True, index=True, nullable=False)\n    description = Column(String(255), default='')\n</code></pre> <ul> <li>Method 3: Create model through <code>SQLAlchemy 2.0</code>.</li> </ul> <pre><code>from sqlalchemy import String\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\n# Create an SQLAlchemy 2.0 model, see document for details: https://docs.sqlalchemy.org/en/20/orm/quickstart.html\nclass Category(Base):\n    __tablename__ = \"category\"\n    # Specify the Schema class corresponding to the model. It is recommended to specify it. If omitted, it can be automatically generated.\n    __pydantic_model__ = CategorySchema\n\n    id: Mapped[int] = mapped_column(primary_key=True, nullable=False)\n    name: Mapped[str] = mapped_column(String(100), unique=True, index=True, nullable=False)\n    description: Mapped[str] = mapped_column(String(255), default=\"\")\n</code></pre> <ul> <li>If you create a model through <code>sqlalchemy</code>, it is recommended to create a corresponding pydantic model at the same   time, and set <code>orm_mode=True</code>.</li> </ul> <pre><code>from pydantic import BaseModel, Field\n\n\nclass CategorySchema(BaseModel):\n    id: Optional[int] = Field(default=None, primary_key=True, nullable=False)\n    name: str = Field(title=\"CategoryName\")\n    description: str = Field(default=\"\", title=\"CategoryDescription\")\n\n    class Config:\n        orm_mode = True\n</code></pre>"},{"location":"#register-modeladmin","title":"Register ModelAdmin","text":"<pre><code>from fastapi import FastAPI\nfrom sqlmodel import SQLModel\nfrom fastapi_amis_admin.admin.settings import Settings\nfrom fastapi_amis_admin.admin.site import AdminSite\nfrom fastapi_amis_admin.admin import admin\n\n# create FastAPI application\napp = FastAPI()\n\n# create AdminSite instance\nsite = AdminSite(settings=Settings(database_url_async='sqlite+aiosqlite:///amisadmin.db'))\n\n\n# register ModelAdmin\n@site.register_admin\nclass CategoryAdmin(admin.ModelAdmin):\n    page_schema = 'Category'\n    # set model\n    model = Category\n\n\n# mount AdminSite instance\nsite.mount_app(app)\n\n\n# create initial database table\n@app.on_event(\"startup\")\nasync def startup():\n    await site.db.async_run_sync(Base.metadata.create_all, is_session=False)\n\n\nif __name__ == '__main__':\n    import uvicorn\n\n    uvicorn.run(app)\n</code></pre>"},{"location":"#formadmin-example","title":"FormAdmin Example","text":"<pre><code>from typing import Any\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom starlette.requests import Request\nfrom fastapi_amis_admin.amis.components import Form\nfrom fastapi_amis_admin.admin import admin\nfrom fastapi_amis_admin.admin.settings import Settings\nfrom fastapi_amis_admin.admin.site import AdminSite\nfrom fastapi_amis_admin.crud.schema import BaseApiOut\nfrom fastapi_amis_admin.models.fields import Field\n\n# create FastAPI application\napp = FastAPI()\n\n# create AdminSite instance\nsite = AdminSite(settings=Settings(database_url_async='sqlite+aiosqlite:///amisadmin.db'))\n\n\n# register FormAdmin\n@site.register_admin\nclass UserLoginFormAdmin(admin.FormAdmin):\n    page_schema = 'UserLoginForm'\n    # set form information, optional\n    form = Form(title='This is a test login form', submitText='login')\n\n    # create form schema\n    class schema(BaseModel):\n        username: str = Field(..., title='username', min_length=3, max_length=30)\n        password: str = Field(..., title='password')\n\n    # handle form submission data\n    async def handle(self, request: Request, data: BaseModel, **kwargs) -&gt; BaseApiOut[Any]:\n        if data.username == 'amisadmin' and data.password == 'amisadmin':\n            return BaseApiOut(msg='Login successfully!', data={'token': 'xxxxxx'})\n        return BaseApiOut(status=-1, msg='Incorrect username or password!')\n\n\n# mount AdminSite instance\nsite.mount_app(app)\n\nif __name__ == '__main__':\n    import uvicorn\n\n    uvicorn.run(app)\n</code></pre>"},{"location":"#working-with-command","title":"Working with Command","text":"<pre><code># Install command line extension\npip install fastapi_amis_admin[cli]\n\n# View help\nfaa --help\n\n# Initialize a `FastAPI-Amis-Admin` project\nfaa new project_name --init\n\n# Initialize a `FastAPI-Amis-Admin` application\nfaa new app_name\n\n# Fast running project\nfaa run\n</code></pre>"},{"location":"#preview","title":"Preview","text":"<ul> <li>Open <code>http://127.0.0.1:8000/admin/</code> in your browser:</li> </ul> <ul> <li>Open <code>http://127.0.0.1:8000/admin/docs</code> in your browser:</li> </ul>"},{"location":"#project","title":"Project","text":"<ul> <li><code>Amis-Admin-Theme-Editor</code>:Theme-Editor for the fastapi-amis-admin.   Allows to add custom css styles and to apply theme --vars change on the fly.</li> <li><code>FastAPI-User-Auth</code>: A simple and powerful <code>FastAPI</code> user <code>RBAC</code>   authentication and authorization library.</li> <li><code>FastAPI-Scheduler</code>: A simple scheduled task management <code>FastAPI</code> extension   based on <code>APScheduler</code>.</li> <li><code>FastAPI-Config</code>: A visual dynamic configuration management extension package based on <code>FastAPI-Amis-Admin</code>.</li> <li><code>FastAPI-Amis-Admin-Demo</code>: An example <code>FastAPI-Amis-Admin</code> application.</li> <li><code>FastAPI-User-Auth-Demo</code>: An example <code>FastAPI-User-Auth</code> application.</li> </ul>"},{"location":"#license","title":"License","text":"<ul> <li>According to the <code>Apache2.0</code> protocol, <code>fastapi-amis-admin</code> is free and open source. It can be used for commercial for   free, but please clearly display copyright information about <code>FastAPI-Amis-Admin</code> on the display interface.</li> </ul>"},{"location":"about/","title":"Help or get help","text":"<p>If you like the <code>fastapi_amis_admin</code> project, or it works for you, you can help <code>fastapi_amis_admin</code> in the following ways.</p>"},{"location":"about/#star-in-github","title":"Star in GitHub","text":"<p>You can \"star\" FastAPI in GitHub (click the star button in the upper right corner):</p> <p>https://github.com/amisadmin/fastapi_amis_admin \u2b50\ufe0f</p> <p>By adding an asterisk, other users will be able to find it more easily and see that it is already useful to others.</p>"},{"location":"about/#help-others-with-issues-in-github","title":"Help others with issues in GitHub","text":"<p>You can see the existing issues and try to help others, most of the time these issues you probably already know the answer to. \ud83e\udd13</p>"},{"location":"about/#create-question","title":"create question","text":"<p>You can create a new issue in the GitHub repository, for example:</p> <ul> <li>Ask a question or ask a question.</li> <li>Suggest a NEW FEATURE.</li> </ul> <p>NOTE: If you create an issue then I will ask you to help others too. \ud83d\ude09</p>"},{"location":"about/#join-the-group-chat","title":"Join the group chat","text":"<p>Currently only a QQ group chat has been established: 229036692, interested partners can join the discussion.</p>"},{"location":"about/#create-pull-request","title":"Create pull request","text":"<p>You can [contribute] to the source code using pull requests such as:</p> <ul> <li>Fix spelling mistakes you find in the documentation.</li> <li>Help [translate documentation into] your language.<ul> <li>You can also help review translations created by others.</li> </ul> </li> <li>Proposed new documentation section.</li> <li>Fix existing issues/bugs.</li> <li>Add new features.</li> </ul>"},{"location":"about/#sponsored-authors","title":"Sponsored Authors","text":"<p>The development and maintenance of <code>fastapi-amis-admin</code>, including document writing are very time-consuming work. If you want to support the development of <code>fastapi-amis-admin</code>, you can financially support the author in the following ways.</p> <ul> <li> <p>Love Power Generation (afdian.net)</p> </li> <li> <p>PayPal.Me</p> </li> </ul>"},{"location":"about/#sponsor-tools-to-support-projects","title":"Sponsor tools to support projects","text":"<p>FastAPI-Amis-Admin appreciates the support of the following projects.</p> <p>You can also sponsor:</p> <ul> <li>FastAPI</li> <li>Amis</li> <li>SQLModel</li> <li>Pydantic</li> </ul>"},{"location":"amis/types/","title":"Types","text":""},{"location":"amis/types/#baseamismodel","title":"BaseAmisModel","text":""},{"location":"amis/types/#inherited-base-class","title":"Inherited base class","text":""},{"location":"amis/types/#pydantic-basemodel","title":"Pydantic BaseModel","text":""},{"location":"amis/types/#methods","title":"Methods:","text":""},{"location":"amis/types/#amis_json","title":"amis_json","text":"<ul> <li>Returns model <code>json</code> data, using field aliases and excluding <code>None</code>.</li> </ul>"},{"location":"amis/types/#amis_dict","title":"amis_dict","text":"<ul> <li>Returns model <code>dict</code> data, using field aliases and excluding <code>None</code>.</li> </ul>"},{"location":"amis/types/#update_from_dict","title":"update_from_dict","text":"<ul> <li>Update model data from <code>dict</code>.</li> </ul>"},{"location":"amis/types/#update_from_kwargs","title":"update_from_kwargs","text":"<ul> <li>Update the model data with a list of <code>kwargs</code> parameters.</li> </ul>"},{"location":"amis/types/#amisnode","title":"AmisNode","text":"<p>Reference: SchemaNode</p>"},{"location":"amis/types/#amisapi","title":"AmisAPI","text":"<p>Reference: API</p>"},{"location":"amis/types/#page","title":"Page","text":"<p>Reference: Page Page</p>"},{"location":"amis/types/#app","title":"App","text":"<p>Reference: App multi-page application</p>"},{"location":"amis/types/#pageschema","title":"PageSchema","text":"<p>Reference: App multi-page application</p>"},{"location":"amis/types/#action","title":"Action","text":"<p>Reference: Action Behavior Button</p>"},{"location":"amis/types/#form","title":"Form","text":"<p>Reference: Form Form</p>"},{"location":"amis/types/#formitem","title":"FormItem","text":"<p>Reference: FormItem General form item</p>"},{"location":"amis/types/#tablecrud","title":"TableCRUD","text":"<p>Reference: CRUD Add Delete Check , Table Table</p>"},{"location":"amis/types/#tablecolumn","title":"TableColumn","text":"<p>Reference: Table Form</p>"},{"location":"amis/types/#components","title":"components","text":"<p>Reference: Component Introduction</p>"},{"location":"amis/types/#more","title":"more","text":"<p>Reference: Amis official documentation</p>"},{"location":"amis_admin/AdminApp/","title":"AdminApp","text":""},{"location":"amis_admin/AdminApp/#adminapp","title":"AdminApp","text":"<ul> <li>AdminApp</li> </ul>"},{"location":"amis_admin/AdminApp/#inheritance-base-class","title":"Inheritance base class","text":""},{"location":"amis_admin/AdminApp/#pageadmin","title":"PageAdmin","text":""},{"location":"amis_admin/AdminApp/#fields","title":"Fields","text":""},{"location":"amis_admin/AdminApp/#engine","title":"engine","text":"<ul> <li> <p>The current application <code>sqlalchemy</code> database engine, supports both synchronous and asynchronous engines.</p> </li> <li> <p>Reference: Asynchronous I/O (asyncio) - SQLAlchemy 1.4 Documentation</p> </li> <li>Example:</li> </ul> <pre><code>from sqlalchemy.ext.asyncio import create_async_engine\nengine = create_async_engine(\"sqlite+aiosqlite:///amisadmin.db\", future=True)\n# engine = create_async_engine(\"mysql+aiomysql://amisadmin:amisadmin@127.0.0.1:3306/amisadmin?charset=utf8mb4\", future=True)\n# engine = create_async_engine(\"postgresql+asyncpg://user:pass@host/dbname\", future=True)\n</code></pre>"},{"location":"amis_admin/AdminApp/#db","title":"db","text":"<ul> <li>The current application is the <code>sqlalchemy</code> client, which supports either synchronous or asynchronous, i.e. <code>AsyncDatabase</code> or <code>Database</code> objects. </li> <li>Reference: AsyncDatabase</li> </ul>"},{"location":"amis_admin/AdminApp/#site","title":"site","text":"<ul> <li>The site of the current application.</li> </ul>"},{"location":"amis_admin/AdminApp/#methods","title":"Methods","text":""},{"location":"amis_admin/AdminApp/#get_admin_or_create","title":"get_admin_or_create","text":"<p>Returns or creates an instance of the admin class object.</p> <pre><code>def get_admin_or_create(self, admin_cls: Type[_BaseAdminT], register: bool = True) -&gt; Optional[_BaseAdminT]\n</code></pre>"},{"location":"amis_admin/AdminApp/#create_admin_instance_all","title":"create_admin_instance_all","text":"<p>Create all instances of the current application's administrative class objects</p> <pre><code>def create_admin_instance_all(self) -&gt; None\n</code></pre>"},{"location":"amis_admin/AdminApp/#get_model_admin","title":"get_model_admin","text":"<p>Gets the instance of the model admin object corresponding to the current application database table.</p> <ul> <li>Must be set: <code>`ModelAdmin.bind_model=True</code>''</li> </ul> <pre><code>@lru_cache\ndef get_model_admin(self, table_name: str) -&gt; Optional[ModelAdmin]\n</code></pre>"},{"location":"amis_admin/AdminApp/#register_admin","title":"register_admin","text":"<p>Register one or more BaseAdmin administrative classes to the current application object, and return the first class object.</p> <pre><code>def register_admin(self, *admin_cls: Type[_BaseAdminT]) -&gt; Type[_BaseAdminT]\n</code></pre>"},{"location":"amis_admin/AdminApp/#unregister_admin","title":"unregister_admin","text":"<p>Unregister one or more BaseAdmin administrative classes in the current application object.</p> <pre><code>def unregister_admin(self, *admin_cls: Type[BaseAdmin])\n</code></pre>"},{"location":"amis_admin/AdminApp/#get_page","title":"get_page","text":"<p>Returns the current application page.</p> <ol> <li>if <code>tabs_mode</code> is not set, return amis App object. 2. if <code>tabs_mode</code> is set, return amis App object.</li> <li> <p>if <code>tabs_mode</code> is set, the amis Page page with the body <code>Tabs</code> will be returned.</p> </li> <li> <p>Reference: App multi-page application</p> </li> <li>Reference: Tabs tab</li> </ol> <pre><code>async def get_page(self, request: Request) -&gt; Union[Page, App]\n</code></pre>"},{"location":"amis_admin/AdminGroup/","title":"AdminGroup","text":""},{"location":"amis_admin/AdminGroup/#admingroup","title":"AdminGroup","text":"<ul> <li>Amis page group</li> </ul>"},{"location":"amis_admin/AdminGroup/#inherited-base-class","title":"Inherited base class","text":""},{"location":"amis_admin/AdminGroup/#pageschemaadmin","title":"PageSchemaAdmin","text":""},{"location":"amis_admin/AdminGroup/#fields","title":"Fields","text":""},{"location":"amis_admin/AdminGroup/#_children","title":"_children","text":"<ul> <li>List of child page properties for the current page group</li> </ul>"},{"location":"amis_admin/AdminGroup/#methods","title":"Methods","text":""},{"location":"amis_admin/AdminGroup/#get_page_schema_children","title":"get_page_schema_children","text":"<p>Returns a list of child page attributes for the current page group.</p> <ul> <li> <p>Permissions are filtered by the <code>request</code> parameter, and those without permissions are not included in the returned results.</p> </li> <li> <p>Reference: App multi-page application#property description</p> </li> </ul> <pre><code>async def get_page_schema_children(self, request: Request) -&gt; List[PageSchema]\n</code></pre>"},{"location":"amis_admin/AdminGroup/#append_child","title":"append_child","text":"<ul> <li>Add a navigation page.</li> </ul> <pre><code>def append_child(self, child: _PageSchemaAdminT)-&gt;None\n</code></pre>"},{"location":"amis_admin/AdminGroup/#get_page_schema_child","title":"get_page_schema_child","text":"<ul> <li>Get page attributes by <code>unique_id</code>.</li> </ul> <pre><code>def get_page_schema_child(self, unique_id: str) -&gt; Optional[_PageSchemaAdminT]\n</code></pre>"},{"location":"amis_admin/AdminGroup/#__iter__","title":"<code>__iter__</code>","text":"<ul> <li>Iterator for child pages within a group.</li> </ul> <pre><code>def __iter__(self) -&gt; Iterator[_PageSchemaAdminT]:\n    return self._children.__iter__()\n</code></pre>"},{"location":"amis_admin/AdminSite/","title":"AdminSite","text":""},{"location":"amis_admin/AdminSite/#baseadminsite","title":"BaseAdminSite","text":"<ul> <li>Admin site base class</li> </ul>"},{"location":"amis_admin/AdminSite/#inherit-base-class","title":"Inherit base class","text":""},{"location":"amis_admin/AdminSite/#adminapp","title":"AdminApp","text":""},{"location":"amis_admin/AdminSite/#fields","title":"Fields","text":""},{"location":"amis_admin/AdminSite/#settings","title":"settings","text":"<ul> <li> <p>Current admin site configuration settings <code>Settings</code> object.</p> </li> <li> <p>Reference: Settings /Settings)</p> </li> </ul>"},{"location":"amis_admin/AdminSite/#fastapi","title":"fastapi","text":"<ul> <li>The FastAPI object that is currently mounted on the management site.</li> <li>Reference: https://fastapi.tiangolo.com/</li> </ul>"},{"location":"amis_admin/AdminSite/#methods","title":"Methods","text":""},{"location":"amis_admin/AdminSite/#__init__","title":"<code>__init__</code>","text":"<p>Initialize the management site.</p> <ul> <li><code>settings</code>: Basic configuration of the management site</li> <li><code>fastapi</code>: manages the site FastAPI application</li> <li><code>engine</code>: manages the site's default database engine.</li> </ul> <pre><code>def __init__(self, settings: Settings, fastapi: FastAPI = None, engine: AsyncEngine = None)\n</code></pre>"},{"location":"amis_admin/AdminSite/#mount_app","title":"mount_app","text":"<p>Mount the current management site to a FastAPI instance.</p> <pre><code>def mount_app(self, fastapi: FastAPI, name: str = None) -&gt; None\n</code></pre>"},{"location":"amis_admin/AdminSite/#adminsite","title":"AdminSite","text":"<ul> <li>Admin Site</li> <li>AdminSite registers several administrative classes by default with respect to the base site: HomeAdmin, DocsAdmin, ReDocsAdmin, FileAdmin</li> </ul>"},{"location":"amis_admin/AdminSite/#inheritance-of-the-base-class","title":"Inheritance of the base class","text":""},{"location":"amis_admin/AdminSite/#baseadminsite_1","title":"BaseAdminSite","text":""},{"location":"amis_admin/BaseAdmin/","title":"BaseAdmin","text":""},{"location":"amis_admin/BaseAdmin/#baseadmin","title":"BaseAdmin","text":"<ul> <li>Page management base class</li> </ul>"},{"location":"amis_admin/BaseAdmin/#fields","title":"fields","text":""},{"location":"amis_admin/BaseAdmin/#app","title":"app","text":"<p>The application <code>AdminApp</code> object registered by the current admin object.</p> <ul> <li>Note that <code>app</code> is not the top level and may be registered by other <code>AdminApp</code> or <code>AdminSite</code>.)</li> </ul>"},{"location":"amis_admin/BaseAdmin/#site","title":"site","text":"<p>The <code>AdminSite</code> site where the current management object is registered, the top-level Admin object.</p>"},{"location":"amis_admin/BaseAdmin/#unique_id","title":"unique_id","text":"<p>The unique ID of the current management object.</p> <ul> <li>Customizable settings, if not set, it will be automatically generated according to the default rules.</li> <li>Unique IDs should not change when a project is started or stopped, and should be unique per Admin class within a project.</li> </ul>"},{"location":"amis_admin/BaseAdmin/#admin-classdiagram","title":"Admin ClassDiagram","text":"<ul> <li>FastAPI-Amis-Admin core class diagram</li> </ul> classDiagram     %% admin     class RouterMixin     RouterMixin: +APIRouter router     RouterAdmin --|&gt; RouterMixin     class BaseAdmin     BaseAdmin: +AdminAPP app     RouterAdmin --|&gt; BaseAdmin     PageSchemaAdmin --|&gt; BaseAdmin     PageSchemaAdmin: +PageSchema page_schema      LinkAdmin --|&gt; PageSchemaAdmin     IframeAdmin --|&gt; PageSchemaAdmin     IframeAdmin: +Iframe iframe      PageAdmin --|&gt; PageSchemaAdmin     PageAdmin --|&gt; RouterAdmin     PageAdmin: +Page page      BaseActionAdmin --|&gt; PageAdmin     FormAdmin --|&gt; BaseActionAdmin     FormAdmin: +Form form     FormAdmin: +BaseModel schema      TemplateAdmin --|&gt; PageAdmin     TemplateAdmin: +Jinja2Templates templates      %% model     FormAction --|&gt; AdminAction     FormAction --|&gt; FormAdmin     ModelAction --|&gt; FormAction     AdminAction: +BaseActionAdmin admin     AdminAction: +Action action      class SQLModelSelector     SQLModelSelector: +SQLModel model     BaseCrud --|&gt; RouterMixin     SQLModelCrud ..|&gt; BaseCrud     SQLModelCrud --|&gt; SQLModelSelector      ModelAdmin --|&gt; BaseActionAdmin     ModelAdmin --|&gt; SQLModelCrud      %% group,app,site     AdminGroup --|&gt; PageSchemaAdmin      AdminAPP --|&gt; AdminGroup     AdminAPP --|&gt; PageAdmin     AdminAPP: +AsyncDatabase db     AdminAPP: +AdminSite site      AdminSite --|&gt; AdminAPP     AdminSite: +FastAPI fastapi     AdminSite: +Settings settings"},{"location":"amis_admin/BaseAdmin/#admin-amis","title":"Admin &amp; Amis","text":"<ul> <li>fastapi-amis-admin class and amis component class diagram</li> </ul> classDiagram AdminSite --&gt; App App --|&gt; AmisNode App *-- PageSchema PageSchema --|&gt; AmisNode PageSchema *-- PageSchema  AdminApp --&gt; App AdminApp --&gt; Tabs Tabs *-- TabsItem TabsItem --|&gt; AmisNode  Page --|&gt; AmisNode PageAdmin --&gt; Page  Form --|&gt; AmisNode FormItem --|&gt; AmisNode Form *-- FormItem FormAdmin --&gt; Form  Table --|&gt; AmisNode CRUD --|&gt; AmisNode TableCRUD --|&gt; Table TableCRUD --|&gt; CRUD Table *-- TableColumn TableColumn --|&gt; AmisNode Action --|&gt; AmisNode FormAction --&gt; Form FormAction --&gt; Action ModelAdmin --&gt; TableCRUD ModelAdmin --&gt; Action"},{"location":"amis_admin/FormAdmin/","title":"FormAdmin","text":""},{"location":"amis_admin/FormAdmin/#baseformadmin","title":"BaseFormAdmin","text":"<ul> <li>Form management base class</li> </ul>"},{"location":"amis_admin/FormAdmin/#inherit-from-base-class","title":"Inherit from base class","text":""},{"location":"amis_admin/FormAdmin/#pageadmin","title":"PageAdmin","text":""},{"location":"amis_admin/FormAdmin/#fields","title":"fields","text":""},{"location":"amis_admin/FormAdmin/#schema","title":"schema","text":"<ul> <li>Form data model, must be set.</li> </ul>"},{"location":"amis_admin/FormAdmin/#schema_init_out","title":"schema_init_out","text":"<ul> <li>Form initialization returns data model</li> </ul>"},{"location":"amis_admin/FormAdmin/#schema_submit_out","title":"schema_submit_out","text":"<ul> <li>Form submit returns data model</li> </ul>"},{"location":"amis_admin/FormAdmin/#form","title":"form","text":"<ul> <li>The current form amis Form object.</li> <li>Reference: Form Form</li> </ul>"},{"location":"amis_admin/FormAdmin/#form_path","title":"form_path","text":"<ul> <li>Form submission and initialization data interface api routing path.</li> </ul>"},{"location":"amis_admin/FormAdmin/#form_init","title":"form_init","text":"<ul> <li>Whether to enable form data initialization. Default: <code>None</code>, not enabled.</li> </ul>"},{"location":"amis_admin/FormAdmin/#route_init","title":"route_init","text":"<ul> <li>Initialize form routing</li> </ul>"},{"location":"amis_admin/FormAdmin/#route_submit","title":"route_submit","text":"<ul> <li>submit form routing</li> </ul>"},{"location":"amis_admin/FormAdmin/#method","title":"method","text":""},{"location":"amis_admin/FormAdmin/#get_form","title":"get_form","text":"<ul> <li>Get the current page Form object.</li> </ul> <pre><code>async def get_form(self, request: Request) -&gt; Form\n</code></pre>"},{"location":"amis_admin/FormAdmin/#get_form_item","title":"get_form_item","text":"<ul> <li>Returns the <code>amis</code> <code>FormItem</code> object for the current page's form fields.</li> <li>Reference: FormItem common form item</li> </ul> <pre><code>async def get_form_item(self, request: Request, \n                  modelfield: ModelField) -&gt; Union[FormItem, SchemaNode]\n</code></pre>"},{"location":"amis_admin/FormAdmin/#formadmin","title":"FormAdmin","text":"<ul> <li>Form management</li> </ul>"},{"location":"amis_admin/FormAdmin/#inherit-from-base-class_1","title":"Inherit from base class","text":""},{"location":"amis_admin/FormAdmin/#baseformadmin_1","title":"BaseFormAdmin","text":""},{"location":"amis_admin/FormAdmin/#method_1","title":"method","text":""},{"location":"amis_admin/FormAdmin/#handle","title":"handle","text":"<p>Handle page form submission data.</p> <ul> <li><code>request</code>: The current request object.</li> <li><code>data</code>: The form data model <code>schema</code> instance object submitted by the user.</li> </ul> <pre><code>async def handle(self, request: Request, data: BaseModel, **kwargs) -&gt; BaseApiOut[Any]\n</code></pre>"},{"location":"amis_admin/FormAdmin/#get_init_data","title":"get_init_data","text":"<p>Get page form initialization data.</p> <pre><code>async def get_init_data(self, request: Request, **kwargs) -&gt; BaseApiOut[Any]\n</code></pre>"},{"location":"amis_admin/ModelAction/","title":"ModelAction","text":""},{"location":"amis_admin/ModelAction/#adminaction","title":"AdminAction","text":"<ul> <li>\u7ba1\u7406\u52a8\u4f5c\u57fa\u7c7b</li> </ul>"},{"location":"amis_admin/ModelAction/#_1","title":"\u5b57\u6bb5","text":""},{"location":"amis_admin/ModelAction/#admin","title":"admin","text":"<ul> <li>\u5f53\u524d\u52a8\u4f5c\u6240\u5c5e\u7ba1\u7406\u5bf9\u8c61.</li> </ul>"},{"location":"amis_admin/ModelAction/#action","title":"action","text":"<ul> <li>\u5f53\u524d\u52a8\u4f5camis Action\u5bf9\u8c61.</li> <li>\u53c2\u8003:  Action \u884c\u4e3a\u6309\u94ae</li> </ul>"},{"location":"amis_admin/ModelAction/#name","title":"name","text":"<ul> <li>\u5f53\u524d\u52a8\u4f5c\u540d\u79f0.\u5fc5\u987b\u5b58\u5728,\u5e76\u4e14\u5e94\u5f53\u552f\u4e00,\u5426\u5219\u4f1a\u8986\u76d6\u4e4b\u524d\u7684\u52a8\u4f5c.</li> </ul>"},{"location":"amis_admin/ModelAction/#label","title":"label","text":"<ul> <li>\u5f53\u524d\u52a8\u4f5c\u663e\u793a\u540d\u79f0.</li> </ul>"},{"location":"amis_admin/ModelAction/#flags","title":"flags","text":"<p>\u5f53\u524d\u52a8\u4f5c\u6807\u8bb0.\u53ef\u7528\u4e8e\u51b3\u5b9a\u5728<code>ModelAdmin</code>\u4e2d\u662f\u5426\u663e\u793a\u7684\u65b9\u5f0f.</p> <ul> <li>item: \u5f53\u524d\u52a8\u4f5c\u5728\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u663e\u793a.</li> <li>bulk: \u5f53\u524d\u52a8\u4f5c\u5728\u5217\u8868\u4e2d\u7684\u6279\u91cf\u64cd\u4f5c\u663e\u793a.</li> <li>toolbar: \u5f53\u524d\u52a8\u4f5c\u5728\u5217\u8868\u4e2d\u7684\u5de5\u5177\u680f\u663e\u793a.</li> <li>column: \u5f53\u524d\u52a8\u4f5c\u5728\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u5217\u663e\u793a.</li> </ul>"},{"location":"amis_admin/ModelAction/#getter","title":"getter","text":"<ul> <li>\u5f53\u524d\u52a8\u4f5c\u83b7\u53d6<code>Action</code>\u7684\u65b9\u6cd5.</li> </ul>"},{"location":"amis_admin/ModelAction/#_2","title":"\u65b9\u6cd5","text":""},{"location":"amis_admin/ModelAction/#get_action","title":"get_action","text":"<ul> <li>\u83b7\u53d6\u5f53\u524d\u52a8\u4f5camis Action\u5bf9\u8c61.</li> </ul> <pre><code>async def get_action(self, request: Request, **kwargs) -&gt; Action\n</code></pre>"},{"location":"amis_admin/ModelAction/#modelaction","title":"ModelAction","text":"<ul> <li>\u6a21\u578b\u7ba1\u7406\u52a8\u4f5c</li> </ul>"},{"location":"amis_admin/ModelAction/#_3","title":"\u7ee7\u627f\u57fa\u7c7b","text":""},{"location":"amis_admin/ModelAction/#formaction","title":"FormAction","text":""},{"location":"amis_admin/ModelAction/#_4","title":"\u5b57\u6bb5","text":""},{"location":"amis_admin/ModelAction/#schema","title":"schema","text":"<ul> <li>\u8868\u5355\u6570\u636e\u6a21\u578b, \u53ef\u4ee5\u8bbe\u7f6e\u4e3a: <code>None</code>.</li> </ul>"},{"location":"amis_admin/ModelAction/#_5","title":"\u65b9\u6cd5","text":""},{"location":"amis_admin/ModelAction/#handle","title":"handle","text":"<p>\u5904\u7406\u6a21\u578b\u52a8\u4f5c\u6570\u636e.</p> <ul> <li><code>request</code>: \u5f53\u524d\u8bf7\u6c42\u5bf9\u8c61.</li> <li><code>item_id</code>: \u7528\u6237\u9009\u62e9\u7684\u6a21\u578b\u6570\u636e\u4e3b\u952e\u5217\u8868.</li> <li><code>data</code>: \u5982\u679c\u914d\u7f6e\u4e86\u52a8\u4f5c\u8868\u5355\u6570\u636e\u6a21\u578b<code>schema</code>,\u5219\u8868\u793a\u8868\u5355\u6570\u636e\u5bf9\u8c61.\u5426\u5219\u4e3a<code>None</code></li> </ul> <pre><code>async def handle(\n    self, \n    request: Request, \n    item_id: List[str], \n    data: Optional[BaseModel],\n    **kwargs\n) -&gt; BaseApiOut[Any]\n</code></pre>"},{"location":"amis_admin/ModelAdmin/","title":"ModelAdmin","text":""},{"location":"amis_admin/ModelAdmin/#basemodeladmin","title":"BaseModelAdmin","text":"<ul> <li>Model management base class</li> </ul>"},{"location":"amis_admin/ModelAdmin/#inherit-from-base-class","title":"Inherit from base class","text":""},{"location":"amis_admin/ModelAdmin/#sqlmodelcrud","title":"SQLModelCrud","text":""},{"location":"amis_admin/ModelAdmin/#fields","title":"fields","text":""},{"location":"amis_admin/ModelAdmin/#list_display","title":"list_display","text":"<p>List of fields that need to be displayed for bulk query.</p> <ul> <li>Support SQLModel model field, current model database table field name</li> <li>Support current model fields, and other model fields.</li> <li>Support amis type: TableColumn</li> <li>Support sqlalchemy Label type: can be constructed by <code>LabelField</code> method.<ul> <li>For example: <code>User.name.label('nickname')</code>, <code>LabelField(User.name.label('nickname'),Field(None,title='User nickname'))</code></li> </ul> </li> <li>Default: <code>self.schema_list.__fields__.values()</code></li> </ul>"},{"location":"amis_admin/ModelAdmin/#list_filter","title":"list_filter","text":"<ul> <li>Batch query filter form field list</li> <li>Support amis type: FormItem</li> <li>Support sqlalchemy Label type: can be constructed by <code>LabelField</code> method.</li> <li>Default: <code>self.schema_filter.__fields__.values()</code></li> </ul>"},{"location":"amis_admin/ModelAdmin/#list_per_page","title":"list_per_page","text":"<ul> <li>Batch query the amount of data per page, the default is: 15</li> </ul>"},{"location":"amis_admin/ModelAdmin/#search_fields","title":"search_fields","text":"<ul> <li>A list of fields in the table that support text fuzzy search, the default is: []</li> </ul>"},{"location":"amis_admin/ModelAdmin/#update_fields","title":"update_fields","text":"<ul> <li>A list of fields that can be edited in the table, the default is: []</li> </ul>"},{"location":"amis_admin/ModelAdmin/#bulk_update_fields","title":"bulk_update_fields","text":"<ul> <li>A list of fields that support batch editing in the table, the default is: []</li> </ul>"},{"location":"amis_admin/ModelAdmin/#link_model_fields","title":"link_model_fields","text":"<ul> <li>Batch query the field list of many-to-many associations that need to be linked, the default is: []. That is, the association list fields are not recognized by default.</li> </ul>"},{"location":"amis_admin/ModelAdmin/#link_model_forms","title":"link_model_forms","text":"<ul> <li>Batch query the many-to-many associated field form list that needs to be linked, which is generated by default based on <code>self.link_model_fields</code>.</li> </ul>"},{"location":"amis_admin/ModelAdmin/#enable_bulk_create","title":"enable_bulk_create","text":"<ul> <li>Whether to enable batch creation, the default is: False</li> </ul>"},{"location":"amis_admin/ModelAdmin/#method","title":"method","text":""},{"location":"amis_admin/ModelAdmin/#get_list_display","title":"get_list_display","text":"<ul> <li>Returns the list of fields displayed by the table list.</li> </ul> <pre><code>async def get_list_display(\n    self,\n    request: Request\n) -&gt; List[Union[SQLModelListField, TableCRUD.Column]]\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_list_filter","title":"get_list_filter","text":"<ul> <li>Returns the list of fields filtered by the table list query.</li> </ul> <pre><code>async def get_list_filter(self, request: Request) -&gt; List[Union[SQLModelListField, FormItem]]\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_list_column","title":"get_list_column","text":"<p>Returns the <code>amis</code> <code>TableColumn</code> object for the table column fields.</p> <ul> <li>Reference: Table table</li> </ul> <pre><code>async def get_list_column(\n    self, request: Request,\n    modelfield: ModelField\n) -&gt; TableColumn\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_list_columns","title":"get_list_columns","text":"<p>Returns a list of <code>amis</code> <code>TableColumn</code> objects for table column fields.</p> <pre><code>async def get_list_columns(self, request: Request) -&gt; List[TableCRUD.Column]\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_list_filter_api","title":"get_list_filter_api","text":"<ul> <li>Returns the AmisAPI object of the list filter filter form.</li> </ul> <pre><code>async def get_list_filter_api(self, request: Request) -&gt; AmisAPI\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_list_table","title":"get_list_table","text":"<ul> <li>Returns the <code>amis</code> <code>TableCRUD</code> object of the page.</li> <li>Reference: CRUD CRUD   , Table</li> </ul> <pre><code>async def get_list_table(self, request: Request) -&gt; TableCRUD\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_form_item","title":"get_form_item","text":"<ul> <li>Returns the <code>amis</code> <code>FormItem</code> object of the page's form fields.</li> <li>Reference: FormItem ordinary form item (gitee.io)</li> </ul> <pre><code>async def get_form_item(\n    self, request: Request,\n    modelfield: ModelField,\n    action: CrudEnum\n) -&gt; Union[FormItem, SchemaNode]\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_form_item_on_foreign_key","title":"get_form_item_on_foreign_key","text":"<ul> <li>Returns the <code>amis</code> <code>FormItem</code> object for the <code>foreign_key</code> field of the page form.</li> </ul> <pre><code>async def get_form_item_on_foreign_key(\n    self,\n    modelfield: ModelField\n) -&gt; Union[Service, SchemaNode]\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_link_model_forms","title":"get_link_model_forms","text":"<ul> <li>Returns a many-to-many associated field form list.</li> </ul> <pre><code>def get_link_model_forms(self) -&gt; List[LinkModelForm]\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_list_filter_form","title":"get_list_filter_form","text":"<ul> <li>Return to list filter filter form.</li> </ul> <pre><code>async def get_list_filter_form(self, request: Request) -&gt; Form\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_create_form","title":"get_create_form","text":"<ul> <li>Return to add model data form.</li> </ul> <pre><code>async def get_create_form(self, request: Request, bulk: bool = False) -&gt; Form\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_update_form","title":"get_update_form","text":"<ul> <li>Return to update model data form.</li> </ul> <pre><code>async def get_update_form(self, request: Request, bulk: bool = False) -&gt; Form\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_create_action","title":"get_create_action","text":"<ul> <li>Returns the <code>amis Action</code> object for the new model data to execute the action.</li> <li>Reference: Action Action Button</li> </ul> <pre><code>async def get_create_action(self, request: Request, bulk: bool = False) -&gt; Optional[Action]\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_update_action","title":"get_update_action","text":"<ul> <li>Returns the <code>amis Action</code> object that updates the model data to perform the action.</li> <li>Reference: Action Action Button</li> </ul> <pre><code>async def get_update_action(self, request: Request, bulk: bool = False) -&gt; Optional[Action]\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_delete_action","title":"get_delete_action","text":"<ul> <li>Returns the <code>amis Action</code> object that deletes the model data to perform the action.</li> <li>Reference: Action Action Button</li> </ul> <pre><code>async def get_delete_action(self, request: Request, bulk: bool = False) -&gt; Optional[Action]\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_actions_on_header_toolbar","title":"get_actions_on_header_toolbar","text":"<ul> <li>Return to the top toolbar of the list table to perform the action list.</li> </ul> <pre><code>async def get_actions_on_header_toolbar(self, request: Request) -&gt; List[Action]\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_actions_on_item","title":"get_actions_on_item","text":"<ul> <li>Return list table data single item operation to perform action list.</li> </ul> <pre><code>async def get_actions_on_item(self, request: Request) -&gt; List[Action]\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#get_actions_on_bulk","title":"get_actions_on_bulk","text":"<ul> <li>Return list table data batch operation to perform action list.</li> </ul> <pre><code>async def get_actions_on_bulk(self, request: Request) -&gt; List[Action]\n</code></pre>"},{"location":"amis_admin/ModelAdmin/#modeladmin","title":"ModelAdmin","text":"<ul> <li>Model management</li> </ul>"},{"location":"amis_admin/ModelAdmin/#inherit-from-base-class_1","title":"Inherit from base class","text":""},{"location":"amis_admin/ModelAdmin/#pageadmin","title":"PageAdmin","text":""},{"location":"amis_admin/ModelAdmin/#basemodeladmin_1","title":"BaseModelAdmin","text":""},{"location":"amis_admin/ModelAdmin/#fields_1","title":"fields","text":""},{"location":"amis_admin/ModelAdmin/#bind_model","title":"bind_model","text":"<p>Whether to bind the model management page to the model, default: <code>True</code></p> <ul> <li> <p>If set to <code>True</code>, it can be obtained through <code>AdminSite.get_model_admin</code>.</p> </li> <li> <p>In models with foreign key associations, the default <code>FormItem</code> (TablePicker) will use the first management page corresponding to the bound model.</p> </li> </ul>"},{"location":"amis_admin/ModelAdmin/#modeladmin-data-control-core-fieldmethod-diagram","title":"ModelAdmin data control core field/method diagram","text":"<ul> <li> <p>A: always affects the final value.</p> </li> <li> <p>O?: Numerical? indicates priority.</p> <ul> <li>The construction scheme with the lowest numerical value is preferred as the final value.</li> <li>Self overridden by overload will be directly adopted as the final value.</li> </ul> </li> </ul> graph LR      subgraph Read         model--O1--&gt;schema_read--&gt;route_read:Response(ReadApiResponse)         subgraph Selector             model.-&gt;fields             pk_name--A--&gt;fields             exclude--A--&gt;fields         end     end      subgraph Create         schema_create--&gt;get_create_form--&gt;create_form(AmisCreateForm)         create_fields--O1--&gt;schema_create--&gt;route_create--&gt;create_api_body(CreateApiRequest)     end      subgraph Update         schema_update--&gt;get_update_form--&gt;update_form(AmisUpdateForm)         update_fields--O1--&gt;schema_update--&gt;route_update--&gt;update_api_body(UpdateApiRequest)         readonly_fields--A--&gt;schema_update     end      subgraph List         fields--&gt;_select_entities--&gt;get_select         fields--&gt;schema_list--&gt;list_api_response(ListApiResponse)         list_display--&gt;get_list_display--&gt;get_list_columns--&gt;list_columns(AmisListColumns)         subgraph route_list             get_select             calc_filter_clause             schema_list             schema_filter         end         list_display--A--&gt;fields--O2--&gt;list_filter--&gt;_filter_entities--&gt;calc_filter_clause         list_display--O1--&gt;list_filter--&gt;schema_filter--&gt;route_list_body(ListApiRequest)         subgraph Filter             search_fields--A--&gt;list_filter--&gt;get_list_filter--&gt;get_list_filter_form--&gt;list_filter_form(AmisListFilterForm)         end     end"},{"location":"amis_admin/PageAdmin/","title":"PageAdmin","text":""},{"location":"amis_admin/PageAdmin/#pageadmin","title":"PageAdmin","text":"<ul> <li>Amis page management</li> </ul>"},{"location":"amis_admin/PageAdmin/#inherit-from-base-class","title":"Inherit from base class","text":""},{"location":"amis_admin/PageAdmin/#pageschemaadmin","title":"PageSchemaAdmin","text":""},{"location":"amis_admin/PageAdmin/#routeradmin","title":"RouterAdmin","text":""},{"location":"amis_admin/PageAdmin/#fields","title":"fields","text":""},{"location":"amis_admin/PageAdmin/#page","title":"page","text":"<ul> <li>Amis page displays the main Page object</li> <li>Reference: Page</li> </ul>"},{"location":"amis_admin/PageAdmin/#page_path","title":"page_path","text":"<ul> <li>Page path, the default is: class module name + class name</li> </ul>"},{"location":"amis_admin/PageAdmin/#page_response_mode","title":"page_response_mode","text":"<p>page response type, default: <code>json</code></p> <ul> <li><code>json</code>: The response format is parsed as json. That is <code>page.amis_dict()</code></li> <li><code>html</code>: The response format is parsed as amis html. That is <code>page.amis_html()</code></li> </ul>"},{"location":"amis_admin/PageAdmin/#page_route_kwargs","title":"page_route_kwargs","text":"<ul> <li>page additional parameters</li> </ul>"},{"location":"amis_admin/PageAdmin/#template_name","title":"template_name","text":"<ul> <li>Page rendering template name.</li> </ul>"},{"location":"amis_admin/PageAdmin/#route_page","title":"route_page","text":"<ul> <li>Page routing function</li> </ul> <pre><code>  @property\n  def route_page(self)-&gt;Callable\n</code></pre>"},{"location":"amis_admin/PageAdmin/#method","title":"method","text":""},{"location":"amis_admin/PageAdmin/#page_permission_depend","title":"page_permission_depend","text":"<ul> <li>The current page routing permission detection dependency.</li> </ul> <pre><code> async def page_permission_depend(self, request: Request) -&gt; bool\n</code></pre>"},{"location":"amis_admin/PageAdmin/#get_page","title":"get_page","text":"<ul> <li>Get the amis page Page object.</li> </ul> <pre><code> async def get_page(self, request: Request) -&gt; Page\n</code></pre>"},{"location":"amis_admin/PageAdmin/#page_parser","title":"page_parser","text":"<ul> <li>Parse the Page object into response data.</li> </ul> <pre><code> def page_parser(self, request: Request, page: Page) -&gt; Response\n</code></pre>"},{"location":"amis_admin/PageSchemaAdmin/","title":"PageSchemaAdmin","text":""},{"location":"amis_admin/PageSchemaAdmin/#pageschemaadmin","title":"PageSchemaAdmin","text":"<ul> <li>Navigation page management base class</li> </ul>"},{"location":"amis_admin/PageSchemaAdmin/#inherit-from-base-class","title":"Inherit from base class","text":""},{"location":"amis_admin/PageSchemaAdmin/#baseadmin","title":"BaseAdmin","text":""},{"location":"amis_admin/PageSchemaAdmin/#fields","title":"fields","text":""},{"location":"amis_admin/PageSchemaAdmin/#page_schema","title":"page_schema","text":"<ul> <li>Current page menu navigation information.If None, it will not be displayed in the menu navigation.</li> </ul>"},{"location":"amis_admin/PageSchemaAdmin/#method","title":"method","text":""},{"location":"amis_admin/PageSchemaAdmin/#has_page_permission","title":"has_page_permission","text":"<p>Controls whether the user has permission to access the current page, the default return: <code>True</code></p> <pre><code>async def has_page_permission(self, request: Request)-&gt;bool:\n    return True\n</code></pre>"},{"location":"amis_admin/PageSchemaAdmin/#error_no_page_permission","title":"error_no_page_permission","text":"<p>The current page has no access permission error</p> <pre><code>def error_no_page_permission(self, request: Request):\n    raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='No page permissions')\n</code></pre>"},{"location":"amis_admin/PageSchemaAdmin/#get_page_schema","title":"get_page_schema","text":"<p>Return to the current page navigation information</p> <pre><code>def get_page_schema(self) -&gt; Optional[PageSchema]\n</code></pre>"},{"location":"amis_admin/PageSchemaAdmin/#linkadmin","title":"LinkAdmin","text":"<ul> <li>Link management</li> </ul>"},{"location":"amis_admin/PageSchemaAdmin/#inherit-from-base-class_1","title":"Inherit from base class","text":""},{"location":"amis_admin/PageSchemaAdmin/#pageschemaadmin_1","title":"PageSchemaAdmin","text":""},{"location":"amis_admin/PageSchemaAdmin/#fields_1","title":"fields","text":""},{"location":"amis_admin/PageSchemaAdmin/#link","title":"link","text":"<ul> <li>Jump links.</li> </ul>"},{"location":"amis_admin/PageSchemaAdmin/#iframeadmin","title":"IframeAdmin","text":"<ul> <li>iframe management</li> </ul>"},{"location":"amis_admin/PageSchemaAdmin/#inherit-from-base-class_2","title":"Inherit from base class","text":""},{"location":"amis_admin/PageSchemaAdmin/#pageschemaadmin_2","title":"PageSchemaAdmin","text":""},{"location":"amis_admin/PageSchemaAdmin/#fields_2","title":"fields","text":""},{"location":"amis_admin/PageSchemaAdmin/#src","title":"src","text":"<ul> <li>iframe link.</li> </ul>"},{"location":"amis_admin/PageSchemaAdmin/#iframe","title":"iframe","text":"<ul> <li>Inline frame Amis Iframe object.</li> <li>\u53c2\u8003: iFrame</li> </ul>"},{"location":"amis_admin/RouterAdmin/","title":"RouterAdmin","text":""},{"location":"amis_admin/RouterAdmin/#routeradmin","title":"RouterAdmin","text":"<ul> <li>Route registration management base class</li> </ul>"},{"location":"amis_admin/RouterAdmin/#inherit-from-base-class","title":"Inherit from base class","text":""},{"location":"amis_admin/RouterAdmin/#baseadmin","title":"BaseAdmin","text":""},{"location":"amis_admin/RouterAdmin/#routermixin","title":"RouterMixin","text":""},{"location":"amis_admin/RouterAdmin/#derived-subclass","title":"Derived subclass","text":"<ul> <li>PageAdmin</li> </ul>"},{"location":"amis_admin/RouterAdmin/#fields","title":"fields","text":""},{"location":"amis_admin/RouterAdmin/#router_path","title":"router_path","text":"<ul> <li>current route registrar, base path</li> </ul>"},{"location":"amis_admin/RouterAdmin/#method","title":"method","text":""},{"location":"amis_admin/RouterAdmin/#register_router","title":"register_router","text":"<p>Registration page routing.</p>"},{"location":"amis_admin/Settings/","title":"Settings","text":""},{"location":"amis_admin/Settings/#settings","title":"Settings","text":"<ul> <li>Site Settings</li> </ul>"},{"location":"amis_admin/Settings/#inherit-from-base-class","title":"Inherit from base class","text":""},{"location":"amis_admin/Settings/#pydantic-basesettings","title":"Pydantic BaseSettings","text":""},{"location":"amis_admin/Settings/#fields","title":"fields","text":""},{"location":"amis_admin/Settings/#debug","title":"debug","text":"<ul> <li>Whether to enable management site debugging.</li> <li>Default: False</li> </ul>"},{"location":"amis_admin/Settings/#site_title","title":"site_title","text":"<ul> <li>Current admin site title</li> </ul>"},{"location":"amis_admin/Settings/#site_icon","title":"site_icon","text":"<ul> <li>Current management site ICON</li> </ul>"},{"location":"amis_admin/Settings/#site_url","title":"site_url","text":"<ul> <li>current admin site url</li> </ul>"},{"location":"amis_admin/Settings/#site_path","title":"site_path","text":"<ul> <li>The path where the current management site is mounted under the FastAPI instance.</li> </ul>"},{"location":"amis_admin/Settings/#database_url_async","title":"database_url_async","text":"<ul> <li>Current admin site <code>sqlalchemy</code> database engine asynchronous connection url.</li> </ul>"},{"location":"amis_admin/Settings/#database_url","title":"database_url","text":"<ul> <li>Current admin site <code>sqlalchemy</code> database engine sync connection url.</li> </ul>"},{"location":"amis_admin/Settings/#language","title":"language","text":"<ul> <li>The international language used by the current management site project. The system default built-in supported languages \u200b\u200bare: <code>en_US</code>, <code>zh_CN</code></li> <li>Starting from version 0.1.1, try to set environment variables <code>LANGUAGE</code>/<code>LANG</code> &gt; OS default language &gt; English <code>en_US</code></li> <li>Note: Setting this value does not directly switch the language, please refer to the tutorial (Multilingual) to switch the language environment.</li> </ul>"},{"location":"amis_admin/Settings/#amis_cdn","title":"amis_cdn","text":"<ul> <li>CDN address of the current management site Amis page, for example: <code>https://npm.elemecdn.com</code></li> <li>Default: <code>https://unpkg.com</code></li> </ul>"},{"location":"amis_admin/Settings/#amis_pkg","title":"amis_pkg","text":"<ul> <li>Current admin site Amis version, eg: <code>amis@beta</code> , <code>amis@1.9.0</code></li> <li>Default: <code>amis@1.10.1</code></li> <li>The default value may change after each release of <code>FastAPI-Amis-Admin</code>, it is recommended that projects set their own stable Amis version.</li> </ul>"},{"location":"amis_admin/Settings/#amis_theme","title":"amis_theme","text":"<ul> <li>current admin site Amis template theme, optional: <code>cxd</code> , <code>antd</code></li> <li>Default: <code>cxd</code></li> </ul>"},{"location":"amis_admin/Settings/#logger","title":"logger","text":"<ul> <li>Currently admin site logger, supports: <code>logging</code> , <code>loguru</code></li> <li>Default: <code>logging.getLogger(\"fastapi_amis_admin\")</code></li> </ul>"},{"location":"amis_admin/TemplateAdmin/","title":"TemplateAdmin","text":""},{"location":"amis_admin/TemplateAdmin/#templateadmin","title":"TemplateAdmin","text":"<ul> <li><code>Jinja2</code> rendering template management</li> <li>Reference: Jinja</li> </ul>"},{"location":"amis_admin/TemplateAdmin/#inherit-from-base-class","title":"Inherit from base class","text":""},{"location":"amis_admin/TemplateAdmin/#pageadmin","title":"PageAdmin","text":""},{"location":"amis_admin/TemplateAdmin/#fields","title":"fields","text":""},{"location":"amis_admin/TemplateAdmin/#page","title":"page","text":"<ul> <li>The current page context context dictionary.</li> </ul>"},{"location":"amis_admin/TemplateAdmin/#templates","title":"templates","text":"<ul> <li><code>Jinja2Templates</code> template renderer</li> </ul>"},{"location":"amis_admin/TemplateAdmin/#method","title":"method","text":""},{"location":"amis_admin/TemplateAdmin/#get_page","title":"get_page","text":"<ul> <li>Get the context dictionary of the current page context.</li> </ul> <pre><code>async def get_page(self, request: Request) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"amis_admin/TemplateAdmin/#page_parser","title":"page_parser","text":"<ul> <li>Parse the page dictionary into response data.</li> </ul> <pre><code>def page_parser(self, request: Request, page: Dict[str, Any])-&gt; Response:\n    page.update({'request': request})\n    return self.templates.TemplateResponse(self.template_name, page)\n</code></pre>"},{"location":"crud/BaseCrud/","title":"BaseCrud","text":""},{"location":"crud/BaseCrud/#basecrud","title":"BaseCrud","text":"<ul> <li>FastAPICrud route registrar base class</li> </ul>"},{"location":"crud/BaseCrud/#inherit-from-base-class","title":"Inherit from base class","text":""},{"location":"crud/BaseCrud/#routermixin","title":"RouterMixin","text":""},{"location":"crud/BaseCrud/#derived-subclass","title":"Derived subclass","text":"<ul> <li> <p>Other ORM backends are not supported yet, SQLModel is powerful enough...</p> </li> </ul>"},{"location":"crud/BaseCrud/#sqlmodelcrud","title":"SQLModelCrud","text":""},{"location":"crud/BaseCrud/#fields","title":"fields","text":""},{"location":"crud/BaseCrud/#schema_model","title":"schema_model","text":"<ul> <li>Current model agreement</li> </ul>"},{"location":"crud/BaseCrud/#schema_list","title":"schema_list","text":"<ul> <li>Batch query data return protocol, default: <code>self.schema_model</code></li> </ul>"},{"location":"crud/BaseCrud/#schema_filter","title":"schema_filter","text":"<ul> <li>Batch query data filter submission protocol, default: <code>self.schema_model</code></li> </ul>"},{"location":"crud/BaseCrud/#schema_create","title":"schema_create","text":"<ul> <li>Create data submission protocol, default: <code>self.schema_model</code></li> </ul>"},{"location":"crud/BaseCrud/#schema_read","title":"schema_read","text":"<ul> <li>read data return protocol, default: <code>self.schema_model</code></li> </ul>"},{"location":"crud/BaseCrud/#schema_update","title":"schema_update","text":"<ul> <li>Update data submission protocol, default: <code>self.schema_model</code></li> </ul>"},{"location":"crud/BaseCrud/#pk_name","title":"pk_name","text":"<ul> <li>current model primary key string, default: <code>id</code>.</li> <li>Description: Database table has and can only have one self-incrementing primary key. (To be expanded)</li> </ul>"},{"location":"crud/BaseCrud/#list_per_page_max","title":"list_per_page_max","text":"<ul> <li>The maximum number of data per page to be read in batches. Default: None, no limit.</li> </ul>"},{"location":"crud/BaseCrud/#route_list","title":"route_list","text":"<ul> <li>Bulk read routing functions. Supports sync/async functions.</li> </ul> <pre><code>@property\ndef route_list(self) -&gt; Callable\n</code></pre>"},{"location":"crud/BaseCrud/#route_read","title":"route_read","text":"<ul> <li>Single item/batch read routing function. Support synchronous/asynchronous functions.</li> </ul> <pre><code>@property\ndef route_read(self) -&gt; Callable\n</code></pre>"},{"location":"crud/BaseCrud/#route_create","title":"route_create","text":"<ul> <li>Single/batch create routing functions. Support synchronous/asynchronous functions.</li> </ul> <pre><code>@property\ndef route_create(self) -&gt; Callable\n</code></pre>"},{"location":"crud/BaseCrud/#route_update","title":"route_update","text":"<ul> <li>Single/batch update routing functions. Support synchronous/asynchronous functions.</li> </ul> <pre><code>@property\ndef route_update(self) -&gt; Callable\n</code></pre>"},{"location":"crud/BaseCrud/#route_delete","title":"route_delete","text":"<ul> <li>Single item/batch delete routing function. Support synchronous/asynchronous function.</li> </ul> <pre><code>@property\ndef route_delete(self) -&gt; Callable\n</code></pre>"},{"location":"crud/BaseCrud/#method","title":"method:","text":""},{"location":"crud/BaseCrud/#has_list_permission","title":"has_list_permission","text":"<ul> <li>Check if you have batch query permission.</li> </ul> <pre><code>async def has_list_permission(\n    self, \n    request: Request, \n    paginator: Optional[Paginator], \n    filter: Optional[SchemaFilterT],\n    **kwargs\n) -&gt; bool\n</code></pre>"},{"location":"crud/BaseCrud/#has_read_permission","title":"has_read_permission","text":"<ul> <li>Check if you have single query permission.</li> </ul> <pre><code>async def has_read_permission(\n    self, \n    request: Request, \n    item_id: Optional[List[str]],\n    **kwargs\n) -&gt; bool\n</code></pre>"},{"location":"crud/BaseCrud/#has_create_permission","title":"has_create_permission","text":"<ul> <li>Check if you have permission to create data.</li> </ul> <pre><code>async def has_create_permission(\n    self, \n    request: Request, \n    obj: Optional[SchemaCreateT], \n    **kwargs\n) -&gt; bool\n</code></pre>"},{"location":"crud/BaseCrud/#has_update_permission","title":"has_update_permission","text":"<ul> <li>Check if you have permission to update data.</li> </ul> <pre><code>async def has_update_permission(\n    self, \n    request: Request, \n    item_id: Optional[List[str]], \n    obj: Optional[SchemaUpdateT], \n    **kwargs\n) -&gt; bool\n</code></pre>"},{"location":"crud/BaseCrud/#has_delete_permission","title":"has_delete_permission","text":"<ul> <li>Check if you have permission to delete data.</li> </ul> <pre><code>async def has_delete_permission(\n    self, \n    request: Request, \n    item_id: Optional[List[str]], \n    **kwargs\n) -&gt; bool:\n    return True\n</code></pre>"},{"location":"crud/BaseCrud/#register_crud","title":"register_crud","text":"<ul> <li>Register Crud routing.</li> </ul> <pre><code>def register_crud(\n    self,\n    schema_list: Type[SchemaListT] = None,\n    schema_filter: Type[SchemaFilterT] = None,\n    schema_create: Type[SchemaCreateT] = None,\n    schema_read: Type[SchemaReadT] = None,\n    schema_update: Type[SchemaUpdateT] = None,\n    list_max_per_page: int = None,\n    depends_list: List[Depends] = None,\n    depends_read: List[Depends] = None,\n    depends_create: List[Depends] = None,\n    depends_update: List[Depends] = None,\n    depends_delete: List[Depends] = None\n) -&gt; \"BaseCrud\"\n</code></pre>"},{"location":"crud/RouterMixin/","title":"RouterMixin","text":""},{"location":"crud/RouterMixin/#routermixin","title":"RouterMixin","text":"<ul> <li>FastAPI Route Registrar</li> </ul>"},{"location":"crud/RouterMixin/#fields","title":"fields","text":""},{"location":"crud/RouterMixin/#router","title":"router","text":"<ul> <li>Route Registrar</li> </ul>"},{"location":"crud/RouterMixin/#router_prefix","title":"router_prefix","text":"<ul> <li>route registrar prefix</li> </ul>"},{"location":"crud/RouterMixin/#router_permission_depend","title":"router_permission_depend","text":"<ul> <li>Route registrar permission control dependency</li> </ul>"},{"location":"crud/RouterMixin/#method","title":"method:","text":""},{"location":"crud/RouterMixin/#get_router","title":"get_router","text":"<ul> <li>Returns the current route registrar.</li> </ul> <pre><code>def get_router(self) -&gt; APIRouter\n</code></pre>"},{"location":"crud/RouterMixin/#error_no_router_permission","title":"error_no_router_permission","text":"<ul> <li>No routing permission error.</li> </ul> <pre><code>def error_no_router_permission(self, request: Request)\n</code></pre>"},{"location":"crud/SQLModelCrud/","title":"SQLModelCrud","text":""},{"location":"crud/SQLModelCrud/#sqlmodelselector","title":"SQLModelSelector","text":"<ul> <li>SQLModel selector</li> </ul>"},{"location":"crud/SQLModelCrud/#fields","title":"fields","text":""},{"location":"crud/SQLModelCrud/#model","title":"model","text":"<ul> <li>Current SQLModel ORM model, must be set.</li> </ul>"},{"location":"crud/SQLModelCrud/#fields_1","title":"fields","text":"<p>Query field list.</p> <ul> <li>Support SQLModel model field, SQLModel model, current model database table field name</li> <li>Support current model fields, and other model fields.</li> <li>Default: <code>self.model</code></li> </ul>"},{"location":"crud/SQLModelCrud/#exclude","title":"exclude","text":"<p>A list of excluded fields. A list of fields to exclude from the current model.</p> <ul> <li>Support current SQLModel model field, current model database table field name</li> <li>Default: []</li> </ul>"},{"location":"crud/SQLModelCrud/#ordering","title":"ordering","text":"<ul> <li>Selector to sort field list.</li> <li>Default: []</li> </ul>"},{"location":"crud/SQLModelCrud/#link_models","title":"link_models","text":"<ul> <li>Link model dictionary. It is more complicated, and the detailed analysis needs to be improved.</li> </ul>"},{"location":"crud/SQLModelCrud/#pk_name","title":"pk_name","text":"<ul> <li>current model primary key string, default: <code>id</code>.</li> <li>Description: Database table has and can only have one self-incrementing primary key. (To be expanded)</li> </ul>"},{"location":"crud/SQLModelCrud/#pk","title":"pk","text":"<ul> <li>The current model primary key sqlalchemy InstrumentedAttribute.</li> </ul>"},{"location":"crud/SQLModelCrud/#parser","title":"parser","text":"<ul> <li>The current model field resolver.</li> <li>Reference: <code>SQLModelFieldParser</code></li> </ul>"},{"location":"crud/SQLModelCrud/#_list_fields_ins","title":"_list_fields_ins","text":"<ul> <li>Batch query sqlalchemy field list.</li> </ul>"},{"location":"crud/SQLModelCrud/#method","title":"method:","text":""},{"location":"crud/SQLModelCrud/#get_select","title":"get_select","text":"<ul> <li>Returns the SQLModel selector.</li> </ul> <pre><code>def get_select(self, request: Request) -&gt; Select\n</code></pre>"},{"location":"crud/SQLModelCrud/#calc_filter_clause","title":"calc_filter_clause","text":"<ul> <li>Calculate query filter conditions.</li> </ul> <pre><code>def calc_filter_clause(\n    self,\n    data: Dict[str, Any]\n) -&gt; List[BinaryExpression]\n</code></pre>"},{"location":"crud/SQLModelCrud/#sqlmodelcrud","title":"SQLModelCrud","text":"<ul> <li>SQLModel ORM Crud Registrar</li> </ul>"},{"location":"crud/SQLModelCrud/#inherit-from-base-class","title":"Inherit from base class","text":""},{"location":"crud/SQLModelCrud/#basecrud","title":"BaseCrud","text":""},{"location":"crud/SQLModelCrud/#sqlmodelselector_1","title":"SQLModelSelector","text":""},{"location":"crud/SQLModelCrud/#fields_2","title":"fields","text":""},{"location":"crud/SQLModelCrud/#engine","title":"engine","text":"<ul> <li>sqlalchemy connection engine, must be set.</li> </ul>"},{"location":"crud/SQLModelCrud/#readonly_fields","title":"readonly_fields","text":"<p>Read-only field list:</p> <ul> <li>Support SQLModel model field, SQLModel model, current model database table field name</li> <li>Support current model fields, and other model fields.</li> <li>Default: <code>[]</code></li> </ul>"},{"location":"crud/SQLModelCrud/#method_1","title":"method:","text":""},{"location":"crud/SQLModelCrud/#get_select_1","title":"get_select","text":"<ul> <li>Returns the SQLModel selector.</li> </ul> <pre><code>def get_select(self, request: Request) -&gt; Select\n</code></pre>"},{"location":"crud/SQLModelCrud/#on_create_pre","title":"on_create_pre","text":"<ul> <li>Returns the processed data of the create request.</li> </ul> <pre><code>async def on_create_pre(\n    self,\n    request: Request,\n    obj: SchemaCreateT,\n    **kwargs\n) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"crud/SQLModelCrud/#on_update_pre","title":"on_update_pre","text":"<ul> <li>Returns the data after the update request has been processed.</li> </ul> <pre><code>async def on_update_pre(\n    self,\n    request: Request,\n    obj: SchemaUpdateT,\n    item_id: Union[List[str], List[int]],\n    **kwargs\n) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"crud/SQLModelCrud/#on_filter_pre","title":"on_filter_pre","text":"<ul> <li>Returns the data processed by the batch query request submission filter.</li> </ul> <pre><code>async def on_filter_pre(\n    self,\n    request: Request,\n    obj: SchemaFilterT,\n    **kwargs\n) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"extended/SQLModel/","title":"SQLModel","text":""},{"location":"extended/SQLModel/#official-website-documentation","title":"Official website documentation","text":"<ul> <li>SQLModel (tiangolo.com)</li> </ul>"},{"location":"extended/about/","title":"About the extension tutorial","text":"<p>The content of this part is not strictly within the scope of the <code>fastapi_amis_admin</code> development tutorial document, but reading and understanding the relevant content of this part will be more conducive to the development of <code>fastapi_amis_admin</code>.</p> <ul> <li>FastAPI</li> <li>Amis</li> <li>SQLModel</li> <li>SQLAlchemy</li> <li>Pydantic</li> <li>[Starlette] (https://www.starlette.io/)</li> <li>Jinja2</li> <li>Alembic</li> <li>Uvicorn</li> </ul>"},{"location":"extended/alembic/","title":"alembic database migration","text":""},{"location":"extended/alembic/#create-migration-folder","title":"create migration folder","text":"<ul> <li>The first time the project runs, the migrations folder is generated</li> </ul> <pre><code>alembic init -t async migrations\n</code></pre>"},{"location":"extended/alembic/#modify-the-configuration-file","title":"Modify the configuration file","text":"<ul> <li>env \u200b\u200bfile path: <code>backend/migrations/env.py</code></li> </ul> <pre><code># import SQLModel\n\nfrom sqlmodel import SQLModel  \n\n# import model data\n\nfrom app.models import *  \n\n# set metadata\n\ntarget_metadata = SQLModel.metadata\n</code></pre> <ul> <li>ini file path: <code>backend/alembic.ini</code></li> </ul> <pre><code># Modify the asynchronous database connection of the project\nsqlalchemy.url = sqlite+aiosqlite:///amisadmin.db\n</code></pre>"},{"location":"extended/alembic/#generate-migration-files","title":"Generate migration files","text":"<ul> <li>Execute the command to generate the sqlModel initialization migration file</li> </ul> <pre><code>alembic revision --autogenerate\n</code></pre>"},{"location":"extended/alembic/#update-database","title":"update database","text":"<pre><code>- Execute command to update database: alembic_version\nalembic upgrade head\n</code></pre>"},{"location":"extended/alembic/#migration","title":"Migration","text":"<ul> <li>The following commands are executed once every time the model is modified.</li> </ul> <pre><code>- Execute command to generate sqlModel update migration file\nalembic revision --autogenerate\n\n- Execute command to update database: alembic_version\nalembic upgrade head\n</code></pre>"},{"location":"extended/alembic/#reference-documentation","title":"Reference documentation:","text":"<ul> <li> <p>FastAPI with Async SQLAlchemy, SQLModel, and Alembic | TestDriven.io</p> </li> <li> <p>Alembic 1.7.5 documentation</p> </li> </ul>"},{"location":"tutorials/quickstart/","title":"Quick start","text":""},{"location":"tutorials/quickstart/#install","title":"Install","text":"<pre><code>pip install fastapi_amis_admin\n</code></pre>"},{"location":"tutorials/quickstart/#simple-example","title":"Simple example","text":"<ol> <li>Create the file <code>adminsite.py</code>:</li> </ol> <pre><code>from fastapi_amis_admin.admin.settings import Settings\nfrom fastapi_amis_admin.admin.site import AdminSite\nfrom fastapi_amis_admin.admin import admin\nfrom fastapi_amis_admin.amis.components import PageSchema\n\n# Create AdminSite instance\nsite = AdminSite(settings=Settings(database_url_async='sqlite+aiosqlite:///amisadmin.db'))\n\n\n# Registration management class\n@site.register_admin\nclass GitHubIframeAdmin(admin.IframeAdmin):\n    # Set page menu information\n    page_schema = PageSchema(label='AmisIframeAdmin', icon='fa fa-github')\n    # Set the jump link\n    src = 'https://github.com/amisadmin/fastapi_amis_admin'\n</code></pre> <ol> <li>Create the file <code>main.py</code>:</li> </ol> <pre><code>from fastapi import FastAPI\nfrom adminsite import site\n\napp = FastAPI()\n\n# Mount the background management system\nsite.mount_app(app)\n\nif __name__ == '__main__':\n    import uvicorn\n\n    uvicorn.run(app)\n</code></pre>"},{"location":"tutorials/quickstart/#run-the-program","title":"Run the program","text":"<pre><code>uvicorn main:app\n</code></pre>"},{"location":"tutorials/quickstart/#interface-preview","title":"Interface preview","text":"<ul> <li>Open a browser to access: <code>http://127.0.0.1:8000/admin/</code></li> </ul>"},{"location":"tutorials/quickstart/#smple-program","title":"Smple program","text":"<ul> <li><code>FastAPI-Amis-Admin-Demo</code>: A sample <code>FastAPI-Amis-Admin</code> application.</li> <li><code>FastAPI-User-Auth-Demo</code>: A sample <code>FastAPI-User-Auth</code> application.</li> </ul>"},{"location":"tutorials/quickstart/#related-items","title":"Related Items","text":"<ul> <li><code>FastAPI-User-Auth</code>: A simple and powerful <code>FastAPI</code> user <code>RBAC</code> authentication and authorization library.</li> <li><code>FastAPI-Scheduler</code>: A simple scheduled task management project based on <code>FastAPI</code>+<code>APScheduler</code>.</li> </ul>"},{"location":"tutorials/quickstart/#more-features","title":"More features","text":"<ul> <li>API reference documentation: API Reference</li> </ul>"},{"location":"tutorials/advanced/AdminApp/","title":"Management Application","text":"<p>The management application is designed for more complex scenarios, the functional modules are isolated from each other, but can be easily and freely combined.</p>"},{"location":"tutorials/advanced/AdminApp/#management-site-architecture","title":"# Management site architecture","text":"<p>The management application is a larger management class, and the management site is a larger management application. Management application can be composed of multiple management classes or management sub-applications, their previous relationship is similar to the following figure:</p> graph TD AdminSite --&gt; AdminAPP AdminSite --&gt; AdminAPP1 AdminSite --&gt; AdminAPP2 AdminSite --&gt; Admin1 AdminSite --&gt; Admin2 AdminAPP1 --&gt; AdminAPP11 AdminAPP1 --&gt; AdminAPP12 AdminAPP --&gt; PageAdmin AdminAPP --&gt; FormAdmin AdminAPP --&gt; TemplateAdmin AdminAPP --&gt; ModelAdmin AdminAPP --&gt; PageSchemaAdmin AdminAPP --&gt; RouterAdmin"},{"location":"tutorials/advanced/AdminApp/#features-of-adminapp","title":"Features of AdminAPP","text":"<ul> <li> <p>AdminAPP is also an administrative class, which can be registered to other administrative applications or administrative sites.</p> </li> <li> <p>An administrative application can register other administrative classes to its own application object.</p> </li> <li> <p>Each managed application can be configured with a separate database connection.</p> </li> </ul>"},{"location":"tutorials/advanced/AdminApp/#configuring-a-standalone-database-engine","title":"Configuring a standalone database engine","text":"<pre><code>from sqlalchemy.ext.asyncio import create_async_engine\n\n\n@site.register_admin\nclass BlogApp(admin.AdminApp):\n    page_schema = PageSchema(label='blog app', icon='fa fa-wordpress')\n    router_prefix = '/blog'\n    # Configure custom database engine\n    engine = create_async_engine('sqlite+aiosqlite:///amisadmin.db', future=True)\n\n    def __init__(self, app: \"AdminApp\"):\n        super(). __init__(app)\n        # Register the admin page under this application;\n        self.register_admin(ArticleAdmin, CategoryAdmin)\n</code></pre>"},{"location":"tutorials/advanced/AdminApp/#special-usage","title":"Special Usage","text":"<p>The admin application can be used as a mini version of the admin site, used to group administrative categories.</p> <pre><code>@site.register_admin\nclass DocsAdminGroup(AdminApp):\n    # display mode, supports 9 modes: 'line,card,radio,vertical,chrome,simple,strong,tiled,sidebar'\n    # Display effect reference: https://aisuda.bce.baidu.com/amis/zh-CN/components/tabs#%E5%B1%95%E7%A4%BA%E6%A8%A1%E5%BC%8F\n    # Default is: None, use menu grouping to display.\n    tabs_mode = amis.TabsModeEnum.vertical\n\n    def __init__(self, app: \"AdminApp\"):\n        super(). __init__(app)\n        self.register_admin(HomeAdmin, DocsAdmin, ReDocsAdmin)\n</code></pre>"},{"location":"tutorials/advanced/AdminApp/#more-uses","title":"More Uses","text":"<p>The tutorials and examples for <code>AdminApp</code> are not perfect at the moment, more rich features and tutorials may be added later. If you just want to implement a specific feature and don't want to delve into it, you can skip this part first. Alternatively, you can read the sample application or the source code to learn more.</p> <ul> <li><code>FastAPI-Amis-Admin-Demo</code>: A sample <code>FastAPI-Amis-Admin</code> application.</li> <li><code>FastAPI-User-Auth-Demo</code>: A <code>FastAPI-User-Auth</code> application example.</li> </ul>"},{"location":"tutorials/advanced/_more/","title":"More to be added...","text":""},{"location":"tutorials/advanced/cli/","title":"Command line","text":""},{"location":"tutorials/advanced/cli/#project-description","title":"Project Description","text":"<p><code>FastAPI-Amis-Admin-Cli</code> is an extension library for building <code>FastAPI-Amis-Admin</code> projects quickly.</p> <p>Project address: FastAPI-Amis-Admin-Cli, more tutorials and usage examples are being added,</p>"},{"location":"tutorials/advanced/cli/#installation","title":"Installation","text":"<pre><code>pip install fastapi-amis-admin-cli\n</code></pre>"},{"location":"tutorials/advanced/cli/#quick-use","title":"Quick use","text":"<pre><code>## View help\nfaa --help\n\n# Initialize a `FastAPI-Amis-Admin` project\nfaa new project_name --init\n\n# Initialize a `FastAPI-Amis-Admin` application\nfaa new app_name\n\n# Run the project quickly\nfaa run\n</code></pre>"},{"location":"tutorials/advanced/debug/","title":"Debug","text":""},{"location":"tutorials/advanced/debug/#project-debugging","title":"Project Debugging","text":""},{"location":"tutorials/advanced/debug/#ide-debugging","title":"IDE debugging","text":"<p>All IDE debugging is turned on by default and can be turned off in the following ways.</p> <ol> <li>Global debugging configuration via the <code>debug`'' property in the</code>Settings`' object</li> </ol> <pre><code>site = AdminSite(settings=Settings(debug=False, database_url_async='sqlite+aiosqlite:///amisadmin.db'))\n</code></pre> <ol> <li>Customize <code>FastAPI</code> object and turn off <code>debug</code></li> </ol> <pre><code>site = AdminSite(settings=Settings(debug=False, database_url_async='sqlite+aiosqlite:///amisadmin.db'),\n                 fastapi=FastAPI(debug=False))\n</code></pre> <p>3.Customize <code>AsyncEngine</code> object and turn off <code>debug</code></p> <pre><code>site = AdminSite(settings=Settings(debug=False),\n                 engine=create_async_engine('sqlite+aiosqlite:///amisadmin.db', echo=False, future=True))\n</code></pre>"},{"location":"tutorials/advanced/debug/#apidocs","title":"ApiDocs","text":"<p><code>fastapi</code> can automatically generate two interactive documents, and all the interfaces of <code>fastapi-amis-admin</code> can be debugged online via docs documents.</p>"},{"location":"tutorials/advanced/debug/#main-application","title":"Main application","text":"<ul> <li> <p><code>/docs</code></p> </li> <li> <p><code>/redoc</code></p> </li> </ul>"},{"location":"tutorials/advanced/debug/#admin","title":"admin","text":"<ul> <li> <p><code>/admin/docs</code></p> </li> <li> <p><code>/admin/redoc</code></p> </li> </ul>"},{"location":"tutorials/advanced/debug/#amis-debugging","title":"Amis debugging","text":"<p><code>amis</code> has a built-in debugging tool that allows you to view the internal running logs of the component for easy analysis of problems.</p>"},{"location":"tutorials/advanced/debug/#enabling-method","title":"Enabling method","text":"<p>This feature is not enabled by default, and can be enabled in the following two ways.</p> <ol> <li>configure the global variable <code>enableAMISDebug</code> with a value of <code>true</code>, for example <code>window.enableAMISDebug = true</code>.</li> <li>Add <code>amisDebug=1</code> to the page URL parameter, such as <code>https://demo.amis.work/admin/?amisDebug=1</code></li> </ol> <p>After turning on, it will be displayed on the right side of the page.</p>"},{"location":"tutorials/advanced/debug/#current-features","title":"Current features","text":"<p>The Debug tool currently provides two functions. 1:</p> <ol> <li>run logs, mainly api and data conversion logs</li> <li>View the component data chain, after the Debug tool is expanded, click on any component to see the component's data chain</li> </ol>"},{"location":"tutorials/advanced/debug/#amis-visual-editor","title":"Amis visual editor","text":"<ul> <li> <p>Project URL: https://github.com/aisuda/amis-editor-demo</p> </li> <li> <p>Online demo: http://aisuda.github.io/amis-editor-demo</p> </li> </ul>"},{"location":"tutorials/advanced/permission/","title":"Permission Control","text":"<p>FastAPI-Amis-Admin' provides very rich permission control methods, you can use different granularity of site/application/page/route permission control for different scenarios.</p>"},{"location":"tutorials/advanced/permission/#execution-flowchart","title":"Execution flowchart","text":"graph LR     request(request)--&gt;AdminSite[has_page_permission]     subgraph  [AdminSite]         AdminSite--False--&gt;AdminSite.error_no_page_permission(error_no_page_permission)     end     subgraph  [AdminApp]         AdminSite--True--&gt;AdminApp[has_page_permission]         AdminApp--False--&gt;AdminApp.error_no_page_permission(error_no_page_permission)     end     subgraph  [ModelAdmin]         AdminApp--True--&gt;ModelAdmin[has_page_permission]         ModelAdmin--False--&gt;ModelAdmin.error_no_page_permission(error_no_page_permission)          ModelAdmin--True--&gt;ModelAdmin.list[has_list_permission]         ModelAdmin.list--False--&gt;Response3(error_no_router_permission)          ModelAdmin--True--&gt;ModelAdmin.create[has_create_permission]         ModelAdmin.create--False--&gt;Response3          ModelAdmin--True--&gt;ModelAdmin.read[has_read_permission]         ModelAdmin.read--False--&gt;Response3          ModelAdmin--True--&gt;ModelAdmin.update[has_update_permission]         ModelAdmin.update--False--&gt;Response3          ModelAdmin--True--&gt;ModelAdmin.delete[has_delete_permission]         ModelAdmin.delete--False--&gt;Response3     end     subgraph  [PageAdmin]         AdminApp--True--&gt;PageAdmin[has_page_permission]         PageAdmin--False--&gt;PageAdmin.error_no_page_permission(error_no_page_permission)     end"},{"location":"tutorials/advanced/permission/#authentication-method","title":"Authentication method","text":""},{"location":"tutorials/advanced/permission/#inheritance-override-permission-validation-method","title":"Inheritance override permission validation method","text":""},{"location":"tutorials/advanced/permission/#has_page_permission","title":"has_page_permission","text":"<ul> <li>Check if you have permission to access the current page, default return: <code>True</code></li> <li>Subordinate objects: <code>PageSchemaAdmin</code> and its subclasses,    for example: <code>PageAdmin</code> , <code>FormAdmin</code> , <code>ModelAdmin</code> , <code>AdminApp</code> , <code>AdminSite</code>.</li> <li>The permissions of the current administrative object depend on the permissions owned by the administrative application or   administrative site to which it is bound.</li> </ul> <pre><code>async def has_page_permission(self, request: Request) -&gt; bool:\n    return self.app is self or await self.app.has_page_permission(request)\n</code></pre> <p>If <code>has_page_permission</code> validates to <code>False</code></p> <ul> <li>The backend menu will not display the current admin page and all default routes under the current admin object will be disabled.</li> <li>If the current object is <code>AdminApp</code>, all the administrative objects registered under the administrative application <code>has_page_permission</code> will return <code>False</code> by default.</li> <li>If the current object is <code>ModelAdmin</code>, then <code>has_list_permission</code>, <code>has_read_permission</code>, <code>has_create_permission</code>, <code>has_update_permission</code>, <code>has_delete_ permission</code> all return <code>False</code> by default.</li> </ul>"},{"location":"tutorials/advanced/permission/#has_list_permission","title":"has_list_permission","text":"<ul> <li>Check if you have bulk query permission. The default is:<code>True</code>.</li> </ul> <pre><code>async def has_list_permission(\n    self, \n    request: Request, \n    paginator: Optional[Paginator], \n    filter: Optional[SchemaFilterT],\n    **kwargs\n) -&gt; bool\n</code></pre>"},{"location":"tutorials/advanced/permission/#has_read_permission","title":"has_read_permission","text":"<ul> <li>Checks if a single query permission is available. Default return:<code>`True</code>''</li> </ul> <pre><code>async def has_read_permission(\n    self, \n    request: Request, \n    item_id: Optional[List[str]],\n    **kwargs\n) -&gt; bool\n</code></pre>"},{"location":"tutorials/advanced/permission/#has_create_permission","title":"has_create_permission","text":"<ul> <li>Checks if the data creation permission is available. Default return:<code>`True</code>''</li> </ul> <pre><code>async def has_create_permission(\n    self, \n    request: Request, \n    obj: Optional[SchemaCreateT], \n    **kwargs\n) -&gt; bool\n</code></pre>"},{"location":"tutorials/advanced/permission/#has_update_permission","title":"has_update_permission","text":"<ul> <li>Checks if the user has permission to update data. Default return:<code>`True</code>''</li> </ul> <pre><code>async def has_update_permission(\n    self, \n    request: Request, \n    item_id: Optional[List[str]], \n    obj: Optional[SchemaUpdateT], \n    **kwargs\n) -&gt; bool\n</code></pre>"},{"location":"tutorials/advanced/permission/#has_delete_permission","title":"has_delete_permission","text":"<ul> <li>Checks if the data deletion permission is available. Default return:<code>`True</code>''</li> </ul> <pre><code>async def has_delete_permission(\n    self, \n    request: Request, \n    item_id: Optional[List[str]], \n    **kwargs\n) -&gt; bool:\n    return True\n</code></pre> <p>If <code>has_crud_permission</code> validates to <code>False</code></p> <ul> <li>the CRUD form page will no longer display the corresponding action buttons and the corresponding API routes will be disabled.</li> </ul>"},{"location":"tutorials/advanced/permission/#custom-permission-validation-dependencies","title":"Custom permission validation dependencies","text":""},{"location":"tutorials/advanced/permission/#router_permission_depend","title":"router_permission_depend","text":"<ul> <li>The route registrar permission validation dependency. Default: <code>None</code>.</li> </ul>"},{"location":"tutorials/advanced/permission/#page_permission_depend","title":"page_permission_depend","text":"<ul> <li>Current page routing permission validation dependency. Default: <code>has_page_permission</code></li> </ul>"},{"location":"tutorials/advanced/permission/#registering-global-permission-validation-dependencies","title":"Registering global permission validation dependencies","text":"<p>By registering a global permission validation dependency, all routes under the <code>AdminSite</code> object will be required to pass the specified permission validation.</p> <pre><code>from fastapi import Depends, FastAPI, Header, HTTPException\n\n\nasync def verify_token(x_token: str = Header(...)):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")\n\n\nsite = AdminSite(\n    settings=Settings(debug=True, database_url_async='sqlite+aiosqlite:///amisadmin.db'),\n    fastapi=FastAPI(dependencies=[Depends(verify_token)])\n)\n</code></pre>"},{"location":"tutorials/advanced/scheduler/","title":"Scheduled tasks","text":"<p><code>FastAPI-Amis-Admin</code> is based on <code>APScheduler</code> to provide a simple and powerful timed task system for the system in the form of application plug-ins.</p>"},{"location":"tutorials/advanced/scheduler/#project-introduction","title":"Project Introduction","text":"<p><code>FastAPI-Scheduler</code> is a simple scheduled task management <code>FastAPI</code> extension library based on <code>APScheduler</code>.</p> <ul> <li>Project address: FastAPI-Scheduler</li> </ul>"},{"location":"tutorials/advanced/scheduler/#install","title":"Install","text":"<pre><code>pip install fastapi-scheduler\n</code></pre>"},{"location":"tutorials/advanced/scheduler/#simple-example","title":"Simple example","text":"<pre><code>from fastapi import FastAPI\nfrom fastapi_amis_admin.admin.settings import Settings\nfrom fastapi_amis_admin.admin.site import AdminSite\nfrom datetime import date\nfrom fastapi_scheduler import SchedulerAdmin\n\n# Create `FastAPI` application\napp = FastAPI()\n\n# Create `AdminSite` instance\nsite = AdminSite(settings=Settings(database_url_async='sqlite+aiosqlite:///amisadmin.db'))\n\n# Create an instance of the scheduled task scheduler `SchedulerAdmin`\nscheduler = SchedulerAdmin.bind(site)\n\n\n# Add scheduled tasks, refer to the official documentation: https://apscheduler.readthedocs.io/en/master/\n# use when you want to run the job at fixed intervals of time\n@scheduler.scheduled_job('interval', seconds=60)\ndef interval_task_test():\n    print('interval task is run...')\n\n\n# use when you want to run the job periodically at certain time(s) of day\n@scheduler.scheduled_job('cron', hour=3, minute=30)\ndef cron_task_test():\n    print('cron task is run...')\n\n\n# use when you want to run the job just once at a certain point of time\n@scheduler.scheduled_job('date', run_date=date(2022, 11, 11))\ndef date_task_test():\n    print('date task is run...')\n\n\n# Mount the background management system\nsite.mount_app(app)\n\n\n@app.on_event(\"startup\")\nasync def startup():\n    # Start the scheduled task scheduler\n    scheduler.start()\n\n\nif __name__ == '__main__':\n    import uvicorn\n\n    uvicorn.run(app)\n</code></pre>"},{"location":"tutorials/advanced/scheduler/#interface-preview","title":"Interface preview","text":"<ul> <li>Open <code>http://127.0.0.1:8000/admin/</code> in your browser:</li> </ul>"},{"location":"tutorials/advanced/scheduler/#dependent-projects","title":"Dependent projects","text":"<ul> <li> <p>FastAPI-Amis-Admin</p> </li> <li> <p>APScheduler</p> </li> </ul>"},{"location":"tutorials/advanced/structure/","title":"Directory Structure","text":"<p>In actual project development, the number of data models and management pages involved is generally large. <code>fastapi-amis-admin</code> recommends that the project adopts a directory structure similar to the django project. Please refer to fastapi_amis_admin_demo, but this is not a mandatory limit, you can also use your own familiar directory structure.</p>"},{"location":"tutorials/advanced/structure/#execute-the-initialization-command","title":"Execute the initialization command","text":"<p>The initialization project file can be quickly generated by executing the following command</p> <pre><code># Initialize a `FastAPI-Amis-Admin` project\nfaa new project_name --init\n\n# Initialize a `FastAPI-Amis-Admin` application\nfaa new app_name\n</code></pre>"},{"location":"tutorials/advanced/structure/#example-project-structure","title":"Example project structure","text":"<pre><code>\u2502.\n\u2502  .gitignore\n\u2502  docker-compose.yml\n\u2502  Dockerfile\n\u2502 README.md\n\u2502  \n\u251c\u2500backend\n\u2502  \u2502  .env\n\u2502 \u2502 alembic.ini\n\u2502 \u2502 amisadmin.db\n\u2502 \u2502 main.py\n\u2502  \u2502  requirements.txt\n\u2502 \u2502  \n\u2502 \u251c\u2500apps\n\u2502 \u2502 \u2502 __init__.py\n\u2502 \u2502 \u2502  \n\u2502 \u2502 \u251c\u2500blog\n\u2502 \u2502 \u2502 \u2502 admin.py\n\u2502 \u2502 \u2502 \u2502 apis.py\n\u2502 \u2502 \u2502 \u2502 views.py\n\u2502 \u2502 \u2502 \u2502 models.py\n\u2502 \u2502 \u2502 \u2502 schemas.py\n\u2502 \u2502 \u2502 \u2502 jobs.py\n\u2502 \u2502 \u2502 \u2502 settings.py\n\u2502 \u2502 \u2502 \u2502 __init__.py\n\u2502 \u2502 \u2502 \u2502  \n\u2502 \u2502 \u2502 \u251c\u2500templates\n\u2502 \u2502 \u2502 \u251c\u2500static\n\u2502 \u2502 \u2502  \n\u2502 \u2502 \u2502          \n\u2502 \u2502 \u251c\u2500demo\n\u2502 \u2502 \u2502 admin.py\n\u2502 \u2502 \u2502 __init__.py\n\u2502 \u2502 \u2502  \n\u2502 \u2502 \u251c\u2500templates\n\u2502  \u2502     \u2502      element.html\n\u2502  \u2502     \u2502      simple.html\n\u2502 \u2502          \n\u2502 \u251c\u2500core\n\u2502 \u2502 \u2502 adminsite.py\n\u2502 \u2502 \u2502 settings.py\n\u2502 \u2502 \u2502 __init__.py\n\u2502 \u2502          \n\u2502 \u251c\u2500migrations\n\u2502 \u2502 \u2502 env.py\n\u2502  \u2502  \u2502  README\n\u2502  \u2502  \u2502  script.py.mako\n\u2502 \u2502 \u2502  \n\u2502 \u2502 \u251c\u2500versions\n\u2502 \u2502 \u2502 bcd68ae939ea_add_url.py\n\u2502 \u2502 \u2502 c79e1785119e_init.py\n\u2502 \u2502          \n\u2502 \u251c\u2500upload\n\u2502 \u2502          \n\u2502 \u251c\u2500utils\n\u2502          \n\u251c\u2500scripts\n       run.sh\n</code></pre>"},{"location":"tutorials/advanced/user-auth/","title":"User Authentication","text":"<p><code>FastAPI-Amis-Admin</code> provides simple and powerful user <code>RBAC</code> authentication and authorization for the system in the form of application plug-ins.</p> <p>Project address: FastAPI-User-Auth, more tutorial documents and usage examples are being added continuously,</p> <p>Welcome to join the Q group 229036692 to study and discuss together.</p>"},{"location":"tutorials/advanced/user-auth/#install","title":"Install","text":"<pre><code>pip install fastapi-user-auth\n</code></pre>"},{"location":"tutorials/advanced/user-auth/#simple-example","title":"Simple example","text":"<pre><code>from fastapi import FastAPI\nfrom fastapi_amis_admin.admin import Settings\nfrom fastapi_user_auth.site import AuthAdminSite\n\n# Create FastAPI application\napp = FastAPI()\n\n# Create AdminSite instance\nsite = AuthAdminSite(\n    settings=Settings(database_url_async='sqlite+aiosqlite:///amisadmin.db')\n)\nauth = site.auth\n# Mount the background management system\nsite.mount_app(app)\n\n# Create initialized database table\n@app.on_event(\"startup\")\nasync def startup():\n    await site.db.async_run_sync(SQLModel.metadata.create_all,is_session=False)\n    # Create a default test user, please change the password in time!!!\n    await auth.create_role_user('admin')\n    await auth.create_role_user('vip')\n\nif __name__ == '__main__':\n    import uvicorn\n    uvicorn.run(app)\n</code></pre> <p>About <code>AuthAdminSite</code></p> <ul> <li>AuthAdminSite is a default authorization management site class encapsulated by FastAPI-User-Auth, which requires users to be logged in.</li> <li>Admin objects registered through AuthAdminSite have the same default permissions (ie: users must also be logged in).</li> <li>You can upgrade or downgrade the default permission requirements by overriding the <code>has_page_permission</code> method.</li> </ul>"},{"location":"tutorials/advanced/user-auth/#example-1","title":"Example-1","text":"<p>Requirements: There is an existing user management application. On the basis of requiring user login, it is also required that the currently logged in user is an administrator, and other non-administrator users are prohibited from operating.</p> <pre><code>class UserAuthApp(AdminApp):\n    async def has_page_permission(self, request: Request) -&gt; bool:\n        return  await request.auth.requires(roles='admin', response=False)(request)\n</code></pre>"},{"location":"tutorials/advanced/user-auth/#example-2","title":"Example-2","text":"<p>Requirements: Under the user management application in the above example, the user login/registration form management object is included, and this part of the route does not require the user to be logged in.</p> <pre><code>class UserLoginFormAdmin(FormAdmin):\n    async def has_page_permission(self, request: Request) -&gt; bool:\n        return True\n</code></pre>"},{"location":"tutorials/advanced/user-auth/#example-3","title":"Example-3","text":"<p>Requirements: There is a <code>ModelAdmin</code> article model management, the permission requirements are as follows:</p> <ul> <li>All articles are made public and can be viewed without user login.</li> <li>The user is not logged in, cannot filter articles by title, and can only view up to 10 pieces of data per page.</li> <li>The user is logged in and the registration time is more than 3 days before publishing articles.</li> <li>The user is logged in and can only modify his own articles, and cannot be modified in batches.</li> <li>Administrators can modify all articles, and can modify them in batches.</li> <li>You must be an administrator to delete articles.</li> </ul> <pre><code>class ArticleAdmin(admin.ModelAdmin):\n    page_schema = PageSchema(label='article management', icon='fa fa-file')\n    model = Article\n    # Configure list display fields\n    list_display = [Article.id, Article.title, Article.img, Article.status,\n                    Category.name, User.username,\n                    TableColumn(type='tpl', label='custom template column',\n                                tpl='&lt;a href=\"${source}\" target=\"_blank\"&gt;ID:${id},Title:${title}&lt;/a&gt;'),\n                    Article.create_time, Article.description,\n                    ]\n    # Configure fuzzy search fields\n    search_fields = [Article.title, Category.name, User.username]\n    # Configure the associated model\n    link_model_fields = [Article.tags]\n\n    # custom query selector\n    async def get_select(self, request: Request) -&gt; Select:\n        sel = await super().get_select(request)\n        return sel.join(Category, isouter=True).join(User, isouter=True)\n\n    # ASD\n    async def has_page_permission(self, request: Request) -&gt; bool:\n        return True\n\n    async def has_list_permission(\n            self, request: Request, paginator: Paginator,\n            filter: BaseModel = None, **kwargs\n    ) -&gt; bool:\n        # The user is not logged in, cannot filter articles by title, and can only view up to 10 pieces of data per page.\n        return bool(\n            await self.site.auth.requires(response=False)(request)\n            or (paginator.perPage &lt;= 10 and filter.title == '')\n        )\n\n    async def has_create_permission(\n            self, request: Request, data: BaseModel, **kwargs\n    ) -&gt; bool:\n        # The user is logged in and the registration time is greater than 3 days before they can publish articles; or the admin role\n        return bool(\n            await self.site.auth.requires(response=False)(request)\n            and request.user.create_time &lt; datetime.now() - timedelta(days=3)\n        ) or await self.site.auth.requires(roles='admin', response=False)(request)\n\n    async def has_delete_permission(\n            self, request: Request, item_id: List[str], **kwargs\n    ) -&gt; bool:\n        # You must be an administrator to delete articles.\n        return await self.site.auth.requires(roles='admin', response=False)(request)\n\n    async def has_update_permission(\n            self, request: Request, item_id: List[str], \n            data: BaseModel, **kwargs\n    ) -&gt; bool:\n        if await self.site.auth.requires(response=False)(request):\n            if item_id is None:\n                return True\n            async with self.site.db.session_maker() as session:\n                # Administrators can modify all articles, and can modify them in batches.\n                if await request.user.has_role(['admin'], session):\n                    return True\n                # Non-administrators can only modify their own articles, and cannot modify them in batches.\n                result = await session.execute(\n                    select(Article.id).where(\n                        Article.id == item_id[0], Article.user_id == request.user.id\n                    ).limit(1)\n                )\n            if result.first():\n                return True\n        return False\n\n    async def on_create_pre(\n            self, request: Request, obj: BaseModel, **kwargs\n    ) -&gt; Dict[str, Any]:\n        data = await super().on_create_pre(request, obj, **kwargs)\n        # When creating a new article, set the current user as the publisher\n        data['user_id'] = request.user.id\n        return data\n</code></pre>"},{"location":"tutorials/advanced/user-auth/#interface-preview","title":"Interface preview","text":"<ul> <li>Open <code>http://127.0.0.1:8000/admin/auth/form/login</code> in your browser:</li> </ul> <ul> <li>Open <code>http://127.0.0.1:8000/admin/</code> in your browser:</li> </ul> <ul> <li>Open <code>http://127.0.0.1:8000/admin/docs</code> in your browser:</li> </ul>"},{"location":"tutorials/basic/FormAdmin/","title":"Form Management","text":"<p><code>FormAdmin</code> implements to display a menu in the menu list. Clicking on the menu will display an <code>amis</code> form page.</p>"},{"location":"tutorials/basic/FormAdmin/#example","title":"Example","text":"<pre><code>from fastapi_amis_admin.admin import admin\nfrom fastapi_amis_admin.crud import BaseApiOut\nfrom fastapi_amis_admin.models.fields import Field\nfrom pydantic import BaseModel\nfrom starlette.requests import Request\n\n\n@site.register_admin\nclass UserLoginFormAdmin(admin.FormAdmin):\n    page_schema = 'UserLoginForm'\n    # Configure form information, can be omitted\n    form = Form(title='This is a test login form', submitText='Login')\n\n    # Create a form data model\n    class schema(BaseModel):\n        username: str = Field(... , title='username', min_length=3, max_length=30)\n        password: str = Field(... , title='password')\n\n    # Handle form submission data\n    async def handle(self, request: Request, data: BaseModel, **kwargs) -&gt; BaseApiOut[Any]:\n        if data.username == 'amisadmin' and data.password == 'amisadmin':\n            return BaseApiOut(msg='Login successful!' , data={'token': 'xxxxxxx'})\n        return BaseApiOut(status=-1, msg='Username or password error!')\n</code></pre> <p>What is shown here is just a simple and basic function.</p>"},{"location":"tutorials/basic/FormAdmin/#form-object","title":"Form object","text":"<p>The class field <code>form</code> can be used to configure basic information about the form, such as: title, form style, submit button, submit API, message prompt, etc. Please refer to: Form form</p>"},{"location":"tutorials/basic/FormAdmin/#form-data-model","title":"Form Data Model","text":"<p>The class field <code>schema</code> defines the form data model, which is inherited from <code>pydantic BaseModel</code>, and supports various types of fields, which are automatically parsed into corresponding components on the front-end by <code>amis</code>. The functions that can be accomplished through <code>schema</code> are:</p> <ul> <li>Define basic field properties. For example: name, label, data type, basic restrictions</li> <li> <p>Custom field handling or validators. Reference: Validators - pydantic</p> </li> <li> <p>Customize the <code>amis</code> component. You can customize the <code>amis</code> component with <code>amis_form_item</code>.</p> </li> </ul>"},{"location":"tutorials/basic/FormAdmin/#handle-functions","title":"Handle functions","text":"<p>The class method <code>handle</code> receives the form data submitted by the user, where you can perform all kinds of complex logical processing of the form data.</p>"},{"location":"tutorials/basic/FormAdmin/#more-uses","title":"More Uses","text":"<p>In fact <code>FormAdmin</code> has more complex uses than can be explained in detail here, please refer to the following documents.</p>"},{"location":"tutorials/basic/FormAdmin/#related-documentation","title":"Related documentation","text":"<ul> <li>FormAdmin</li> </ul>"},{"location":"tutorials/basic/Inheritance/","title":"Inheritance override","text":"<p>The inheritance and rewriting of classes in fastapi-amis-admin is very extensive. Skilled application of inheritance and rewriting will make your code more concise and easier to extend.</p> <ul> <li>The usual admin pages inherit from the default admin classes, such as: <code>IframeAdmin</code>, <code>PageAdmin</code>, <code>ModelAdmin</code>, <code>FormAdmin</code>, <code>AdminApp</code>, etc.</li> <li>The management page inherited from the default management class can also be inherited twice or multiple times.</li> </ul>"},{"location":"tutorials/basic/Inheritance/#example-1-custom-home-page","title":"Example-1 (custom home page)","text":"<pre><code>from fastapi_amis_admin import admin\n\n# Cancel the default home page\nsite.unregister_admin(admin.HomeAdmin)\n\n\n# Register custom homepage\n@site.register_admin\nclass MyHomeAdmin(admin.HomeAdmin):\n\n    async def get_page(self, request: Request) -&gt; Page:\n        # Get the default page\n        page = await super().get_page(request)\n        # custom modification\n        page.body.title = 'MyHome'\n        ...\n        return page\n</code></pre>"},{"location":"tutorials/basic/Inheritance/#example-2-custom-template-management-base-class","title":"Example-2 (custom template management base class)","text":"<pre><code>import datetime\n\nfrom fastapi_amis_admin import admin, amis\n\n\nclass MyJinja2Admin(admin.TemplateAdmin):\n    templates: Jinja2Templates = Jinja2Templates(directory='apps/demo/templates')\n\n\n@site.register_admin\nclass SimpleTemplateAdmin(MyJinja2Admin):\n    page_schema = amis.PageSchema(label='Jinja2', icon='fa fa-link')\n    template_name = 'simple.html'\n\n    async def get_page(self, request: Request) -&gt; Dict[str, Any]:\n        return {'current_time': datetime.datetime.now()}\n\n\n@site.register_admin\nclass ElementTemplateAdmin(MyJinja2Admin):\n    page_schema = amis.PageSchema(label='ElementUI', icon='fa fa-link')\n    template_name = 'element.html'\n</code></pre>"},{"location":"tutorials/basic/Inheritance/#example-3-reuse-model-management-class","title":"Example-3 (reuse model management class)","text":"<pre><code>from fastapi_amis_admin import admin\nfrom fastapi_amis_admin.models.fields import Field\n\n\n# Create a SQLModel model, please refer to: https://sqlmodel.tiangolo.com/\nclass Article(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True, nullable=False)\n    title: str = Field(title='ArticleTitle', max_length=200)\n    description: Optional[str] = Field(default='', title='ArticleDescription', max_length=400)\n    status: bool = Field(None, title='status')\n    content: str = Field(title='ArticleContent')\n    category_id: Optional[int] = Field(default=None, foreign_key=\"category.id\", title='CategoryId')\n    is_active: bool = False\n\n\n@site.register_admin\nclass ArticleAdmin(admin.ModelAdmin):\n    page_schema = 'article management'\n    model = Article\n    # Set the fields to display\n    list_display = [Article.id, Article.title, Article.description, Article.status, Category.name]\n    # Set up fuzzy search field\n    search_fields = [Article.title, Category.name]\n\n    # custom base selector\n    async def get_select(self, request: Request) -&gt; Select:\n        stmt = await super().get_select(request)\n        return stmt.outerjoin(Category, Article.category_id == Category.id)\n\n\n@site.register_admin\nclass ActiveArticle(ArticleAdmin):\n    \"\"\"Inheritance and reuse of `ArticleAdmin`; this example is relatively simple, the actual application may be more complex.\"\"\"\n\n    # custom route prefix\n    router_prefix = '/article.active'\n\n    # Override the base selector\n    async def get_select(self, request: Request) -&gt; Select:\n        stmt = await super().get_select(request)\n        return stmt.where(Article.is_active == True)\n</code></pre>"},{"location":"tutorials/basic/Inheritance/#example-4-custom-management-application","title":"Example-4 (custom management application)","text":"<p>\u53c2\u8003: fastapi_user_auth.UserAuthApp</p>"},{"location":"tutorials/basic/Inheritance/#example-5-custom-admin-site","title":"Example-5 (custom admin site)","text":"<p>Reference: Basic Tutorial-&gt;Site Configuration-&gt;Custom Management Site</p> <p>\u53c2\u8003: fastapi_user_auth.AuthAdminSite</p>"},{"location":"tutorials/basic/ModelAction/","title":"\u6a21\u578b\u52a8\u4f5c","text":"<p>\u6a21\u578b\u7ba1\u7406\u52a8\u4f5c\u6307\u7684\u662f\u9488\u5bf9\u67d0\u4e00\u9879\u6216\u591a\u9879\u6a21\u578b\u6570\u636e\u6240\u8fdb\u884c\u7684\u64cd\u4f5c.\u4f8b\u5982:\u6700\u57fa\u672c\u7684\u64cd\u4f5c\u6709\u589e\u52a0/\u8bfb\u53d6/\u66f4\u65b0/\u5220\u9664; \u4f46\u662f\u5f88\u591a\u65f6\u5019\u4f60\u53ef\u80fd\u9700\u8981\u6dfb\u52a0\u67d0\u4e9b\u7279\u6b8a\u7684\u64cd\u4f5c\u547d\u4ee4.\u4f8b\u5982:\u6539\u53d8\u6570\u636e\u72b6\u6001, \u6267\u884c\u67d0\u4e9b\u4efb\u52a1.\u8fd9\u65f6\u5019\u4f60\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u6a21\u578b\u7ba1\u7406\u52a8\u4f5c.<code>fastapi_amis_admin</code> \u62e5\u6709\u591a\u79cd\u7c7b\u578b\u6a21\u578b\u52a8\u4f5c,\u4e0b\u9762\u7b80\u5355\u6f14\u793a\u51e0\u79cd\u53ef\u80fd\u5e38\u7528\u7684\u52a8\u4f5c\u65b9\u5f0f.</p>"},{"location":"tutorials/basic/ModelAction/#_2","title":"\u81ea\u5b9a\u4e49\u5de5\u5177\u6761\u52a8\u4f5c","text":""},{"location":"tutorials/basic/ModelAction/#-1","title":"\u793a\u4f8b-1","text":"<pre><code>@site.register_admin\nclass ArticleAdmin(admin.ModelAdmin):\n    page_schema = PageSchema(label='\u6587\u7ae0\u7ba1\u7406', icon='fa fa-file')\n    model = Article\n\n    # \u6dfb\u52a0\u81ea\u5b9a\u4e49\u5de5\u5177\u6761\u52a8\u4f5c\n    admin_action_maker = [\n        lambda admin: AdminAction(\n            admin=admin,\n            name='test_ajax_action',\n            action=ActionType.Ajax(\n                label='\u5de5\u5177\u6761ajax\u52a8\u4f5c',\n                api='https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm'\n            ),\n            flags=['toolbar']\n        ),\n        lambda admin: AdminAction(\n            admin=admin,\n            name='test_link_action',\n            action=ActionType.Link(\n                label='\u5de5\u5177\u6761link\u52a8\u4f5c',\n                link='https://github.com/amisadmin/fastapi_amis_admin'\n            ),\n            flags=['toolbar']\n        )\n    ]\n</code></pre> <p>\u5728\u672c\u793a\u4f8b\u4e2d,\u901a\u8fc7<code>admin_action_maker</code>\u5b57\u6bb5,\u5728\u6a21\u578b\u5217\u8868\u8868\u683c\u5de5\u5177\u6761\u6dfb\u52a0\u4e86\u4e24\u4e2a\u7b80\u5355\u7684\u6a21\u578b\u52a8\u4f5c:</p> <ol> <li><code>ActionType.Ajax</code>\u52a8\u4f5c\u5c06\u53d1\u9001\u4e00\u4e2aajax\u8bf7\u6c42,\u5230\u6307\u5b9a\u7684api.</li> <li><code>ActionType.Link</code>\u52a8\u4f5c\u70b9\u51fb\u540e\u5c06\u8df3\u8f6c\u5230\u6307\u5b9a\u7684\u94fe\u63a5.</li> </ol> <p>\u5173\u4e8e<code>ActionType</code></p> <p>ActionType\u4e8b\u5b9e\u4e0a\u662famis Action \u884c\u4e3a\u6309\u94ae\u7ec4\u4ef6\u7684\u4e00\u4e2apython\u6a21\u578b\u6620\u5c04,\u5b83\u652f\u6301\u591a\u79cd\u5e38\u89c1\u7684\u884c\u4e3a\u7c7b\u578b.\u4f8b\u5982:ajax\u8bf7\u6c42/\u4e0b\u8f7d\u8bf7\u6c42/\u8df3\u8f6c\u94fe\u63a5/\u53d1\u9001\u90ae\u4ef6/\u5f39\u7a97/\u62bd\u5c49/\u590d\u5236\u6587\u672c\u7b49\u7b49.</p> <p>fastapi_amis_admin\u7684\u7075\u6d3b\u6027\u5f3a\u4f53\u73b0\u4e4b\u4e00,\u662f\u56e0\u4e3a\u5b83\u662f\u57fa\u4e8eamis\u7684\u7ec4\u4ef6\u5f0f\u5f00\u53d1,\u4f60\u53ef\u4ee5\u5728\u5f88\u591a\u5730\u65b9\u81ea\u7531\u7684\u66ff\u6362\u6216\u6dfb\u52a0\u5185\u7f6e\u7684amis\u7ec4\u4ef6.\u5728\u6b64\u4e4b\u524d\u5e0c\u671b\u4f60\u80fd\u9605\u8bfbamis\u6587\u6863,\u5bf9amis\u6838\u5fc3\u7ec4\u4ef6\u6709\u4e00\u5b9a\u7684\u4e86\u89e3.</p>"},{"location":"tutorials/basic/ModelAction/#_3","title":"\u81ea\u5b9a\u4e49\u5355\u9879\u64cd\u4f5c\u52a8\u4f5c","text":""},{"location":"tutorials/basic/ModelAction/#-2","title":"\u793a\u4f8b-2","text":"<pre><code># \u521b\u5efa\u666e\u901aajax\u52a8\u4f5c\nclass TestAction(admin.ModelAction):\n    # \u914d\u7f6e\u52a8\u4f5c\u57fa\u672c\u4fe1\u606f\n    action = ActionType.Dialog(label='\u81ea\u5b9a\u4e49\u666e\u901a\u5904\u7406\u52a8\u4f5c', dialog=Dialog())\n\n    # \u52a8\u4f5c\u5904\u7406\n    async def handle(self, request: Request, item_id: List[str], data: Optional[BaseModel], **kwargs):\n        # \u4ece\u6570\u636e\u5e93\u83b7\u53d6\u7528\u6237\u9009\u62e9\u7684\u6570\u636e\u5217\u8868\n        items = await self.fetch_item_scalars(item_id)\n        # \u6267\u884c\u52a8\u4f5c\u5904\u7406\n        ...\n        # \u8fd4\u56de\u52a8\u4f5c\u5904\u7406\u7ed3\u679c\n        return BaseApiOut(data=dict(item_id=item_id, data=data, items=list(items)))\n\n\n@site.register_admin\nclass ArticleAdmin(admin.ModelAdmin):\n    page_schema = PageSchema(label='\u6587\u7ae0\u7ba1\u7406', icon='fa fa-file')\n    model = Article\n    # \u6dfb\u52a0\u81ea\u5b9a\u4e49\u5355\u9879\u548c\u6279\u91cf\u64cd\u4f5c\u52a8\u4f5c\n    admin_action_maker = [\n        lambda admin: TestAction(admin, name='test_action',flags=['item','bulk'])\n    ]\n</code></pre> <p>\u793a\u4f8b-2\u4e2d\u6240\u5b8c\u6210\u7684\u5de5\u4f5c:</p> <ul> <li> <p>\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6700\u57fa\u7840\u7684\u6a21\u578b\u52a8\u4f5c\u7c7b<code>TestAction</code>,\u5b83\u7684\u6838\u5fc3\u662f<code>handle</code>   \u65b9\u6cd5.\u5177\u4f53\u8bf7\u53c2\u8003: ModelAction</p> </li> <li> <p>\u901a\u8fc7<code>admin_action_maker</code>\u5b57\u6bb5,\u5b9e\u4f8b\u5316<code>TestAction</code>\u7c7b,\u7ed1\u5b9a\u5230\u5f53\u524d\u6a21\u578b\u7ba1\u7406\u7c7b\u7684\u5355\u9879\u548c\u6279\u91cf\u64cd\u4f5c\u52a8\u4f5c.</p> </li> </ul>"},{"location":"tutorials/basic/ModelAction/#_4","title":"\u81ea\u5b9a\u4e49\u6279\u91cf\u64cd\u4f5c\u52a8\u4f5c","text":""},{"location":"tutorials/basic/ModelAction/#-3","title":"\u793a\u4f8b-3","text":"<pre><code>from fastapi_amis_admin import admin\n\n\n# \u521b\u5efa\u8868\u5355ajax\u52a8\u4f5c\nclass TestFormAction(admin.ModelAction):\n    # \u914d\u7f6e\u52a8\u4f5c\u57fa\u672c\u4fe1\u606f\n    action = ActionType.Dialog(label='\u81ea\u5b9a\u4e49\u8868\u5355\u52a8\u4f5c', dialog=Dialog())\n\n    # \u521b\u5efa\u52a8\u4f5c\u8868\u5355\u6570\u636e\u6a21\u578b\n    class schema(BaseModel):\n        username: str = Field(..., title='\u7528\u6237\u540d')\n        password: str = Field(..., title='\u5bc6\u7801', amis_form_item='input-password')\n        is_active: bool = Field(True, title='\u662f\u5426\u6fc0\u6d3b')\n\n    # \u52a8\u4f5c\u5904\u7406\n\n    async def handle(self, request: Request, item_id: List[str], data: schema, **kwargs):\n        # \u4ece\u6570\u636e\u5e93\u83b7\u53d6\u7528\u6237\u9009\u62e9\u7684\u6570\u636e\u5217\u8868\n        items = await self.fetch_item_scalars(item_id)\n        # \u6267\u884c\u52a8\u4f5c\u5904\u7406\n        ...\n        # \u8fd4\u56de\u52a8\u4f5c\u5904\u7406\u7ed3\u679c\n        return BaseApiOut(data=dict(item_id=item_id, data=data, items=list(items)))\n\n\n@site.register_admin\nclass ArticleAdmin(admin.ModelAdmin):\n    page_schema = PageSchema(label='\u6587\u7ae0\u7ba1\u7406', icon='fa fa-file')\n    model = Article\n\n    # \u6dfb\u52a0\u81ea\u5b9a\u4e49\u5355\u9879\u548c\u6279\u91cf\u64cd\u4f5c\u52a8\u4f5c\n    admin_action_maker = [\n        lambda admin: TestAction(admin, name='test_action',flags=['item','bulk'])\n    ]\n</code></pre> <p>\u793a\u4f8b-3\u4e0e\u793a\u4f8b-2\u975e\u5e38\u76f8\u4f3c, \u4f46\u662f\u5b83\u5141\u8bb8\u7528\u6237\u6dfb\u52a0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u8868\u5355,\u8fd9\u4e2a\u5728\u5f88\u591a\u60c5\u51b5\u4e0b,\u975e\u5e38\u6709\u7528.</p> <p><code>schema</code>\u7684\u5b9a\u4e49\u4e0e\u4f7f\u7528\u4e0e<code>FormAdmin</code>\u975e\u5e38\u76f8\u4f3c.</p>"},{"location":"tutorials/basic/ModelAction/#_5","title":"\u66f4\u591a\u7528\u6cd5","text":"<p>\u8bf7\u53c2\u8003demo\u7a0b\u5e8f,\u6216\u9605\u8bfb\u4ee5\u4e0b\u76f8\u5173\u6587\u6863,\u5e94\u8be5\u4f1a\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9.</p> <ul> <li> <p>ModelAdmin</p> </li> <li> <p>ModelAction</p> </li> <li> <p>Action \u884c\u4e3a\u6309\u94ae</p> </li> </ul>"},{"location":"tutorials/basic/ModelAdmin/","title":"Model Management","text":"<p>Model management is the most commonly used management class in background management, and its functions are also the most abundant. fastapi-amis-admin has implemented various basic operations commonly used for data models, and you can still make on this basis. More personalized extensions.</p>"},{"location":"tutorials/basic/ModelAdmin/#example-1","title":"Example-1","text":"<pre><code># First create a SQLModel model, please refer to: https://sqlmodel.tiangolo.com/\nclass Category(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True, nullable=False)\n    name: str = Field(title='CategoryName')\n    description: str = Field(default='', title='Description')\n\n\n# Register ModelAdmin\n@site.register_admin\nclass CategoryAdmin(admin.ModelAdmin):\n    page_schema = 'Category Management'\n    # Configuration management model\n    model = Category\n</code></pre> <p>Let's take a look at this simple example-1. It completes the following steps:</p> <ol> <li>Define a <code>Category</code> model.</li> <li>Define a model management class that inherits <code>admin.ModelAdmin</code>.</li> <li>Configure the model and register to the management site.</li> </ol> <p>About the SQLModel model</p> <p>In fact, this part of the code does not belong to the <code>amis-admin</code> code, because it can be reused anywhere ORM mapping is required, in the project you should define a separate <code>models.py</code> file to write this part of the code.</p> <p>SQLModel is a very good Python ORM library, written by the same author of FastAPI, which perfectly combines SQLAlchemy and Pydantic. Please read its official documentation: https://sqlmodel.tiangolo.com/</p>"},{"location":"tutorials/basic/ModelAdmin/#example-2","title":"Example-2","text":"<pre><code># Create a SQLModel model, please refer to: https://sqlmodel.tiangolo.com/\nclass Article(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True, nullable=False)\n    title: str = Field(title='ArticleTitle', max_length=200)\n    description: Optional[str] = Field(default='', title='ArticleDescription', max_length=400)\n    status: bool = Field(None, title='status')\n    content: str = Field(title='ArticleContent')\n    # Associate Category model, model definition reference [Example-1]\n    category_id: Optional[int] = Field(default=None, foreign_key=\"category.id\", title='CategoryId')\n    # category: Optional[Category] = Relationship(back_populates=\"articles\")\n\n\n@site.register_admin\nclass ArticleAdmin(admin.ModelAdmin):\n    page_schema = 'article management'\n    model = Article\n    # Set the fields to display\n    list_display = [Article.id, Article.title, Article.description, Article.status, Category.name]\n    # Set up fuzzy search field\n    search_fields = [Article.title, Category.name]\n\n    # custom base selector\n    async def get_select(self, request: Request) -&gt; Select:\n        stmt = await super().get_select(request)\n        return stmt.outerjoin(Category, Article.category_id == Category.id)\n</code></pre> <p>Example 2 is more complicated than Example 1. But if you are familiar with <code>Django-Admin</code> you will find they are very similar, yes. <code>fastapi_amis_admin</code> is inspired by <code>Django-Admin</code>, so many functions are designed with is similar, and <code>fastapi_amis_admin</code> The functions are more abundant and the configuration is more flexible.</p>"},{"location":"tutorials/basic/ModelAdmin/#configure-display-fields","title":"Configure display fields","text":"<p>By default, the management list will display all fields of the current model. But if you only need to display some fields, or you also need to display other fields of related models, you can customize the fields to be displayed by configuring <code>list_display</code>.</p> <ul> <li> <p>For example in example 2:</p> </li> <li> <p><code>Article.content</code> and <code>Article.category_id</code> are not included in the display field.</p> </li> <li><code>Category.name</code> is a field of another model and can also be included in the display field, but here you need to customize the selector <code>left join</code> <code>Category</code> model through the <code>get_select</code> method.</li> </ul>"},{"location":"tutorials/basic/ModelAdmin/#configure-fuzzy-search-fields","title":"Configure fuzzy search fields","text":"<p><code>search_fields</code> configures the query method for string fields as <code>like</code> filtering. If <code>search_fields</code> is not configured, the default is <code>equal</code> query method.</p>"},{"location":"tutorials/basic/ModelAdmin/#custom-selector","title":"Custom selector","text":"<p>The <code>get_select</code> custom selector can achieve different initial data query conditions for different requests, similar to the <code>get_queryset</code> method in <code>django-admin</code>.</p>"},{"location":"tutorials/basic/ModelAdmin/#function-list","title":"function list","text":"<p>Currently, the model management class <code>ModelAdmin</code> in <code>fastapi-amis-admin</code> has supported functions including but not limited to the following list.</p> Function Related Fields or Methods Remarks Custom bulk query fields <code>fields</code>, <code>exclude</code> Custom batch query display fields <code>list_display</code>, <code>get_list_display</code> Support display types are picture, audio, video, list, <code>Json</code> Custom batch query filter form <code>list_filter</code> Support text exact/fuzzy matching, time range filtering, multiple selection filtering Custom batch query sorting field <code>ordering</code> Custom model primary key <code>pk_name</code> Custom bulk query selector <code>get_select</code> Support <code>Jion</code> other database table models Custom Model Database <code>engine</code> Custom batch query read-only fields <code>readonly_fields</code> Customize batch query data volume per page <code>list_per_page</code> Custom bulk query fuzzy search fields <code>search_fields</code> Customize fields for new models <code>create_fields</code> Customize fields that support editing <code>update_fields</code> Customize fields that support bulk editing <code>bulk_update_fields</code> Customize the new model data form <code>get_create_form</code> Custom update model data form <code>get_update_form</code> Customize the new model data execution action <code>get_create_action</code> Custom update model data execution action <code>get_update_action</code> Custom delete model data execution action <code>get_delete_action</code> Custom batch query data return protocol <code>schema_list</code> Customize batch query data filtering submission protocol <code>schema_filter</code> Custom Create Data Submission Protocol <code>schema_create</code> Custom read data return protocol <code>schema_read</code> Custom update data submission protocol <code>schema_update</code> Custom batch query permission <code>has_list_permission</code> Custom single query permission <code>has_read_permission</code> Custom create data permission <code>has_create_permission</code> Custom update data permission <code>has_update_permission</code> Custom delete data permission <code>has_delete_permission</code>"},{"location":"tutorials/basic/ModelAdmin/#more-usage","title":"More usage","text":"<p>The usage of <code>ModelAdmin</code> is very flexible, only the most basic usage is shown here, you can read the API documentation Or refer to the demo program for more detailed usage. Examples of specific application scenarios will be added in the future. If you have better application examples or tutorial documents, you can submit them through github, thank you very much for your support! <code>fastapi_amis_admin</code> will do better!</p> <ul> <li> <p>FastAPI-Amis-Admin-Demo</p> </li> <li> <p>FastAPI-User-Auth-Demo</p> </li> <li> <p>ModelAdmin - FastAPI-Amis-Admin</p> </li> <li> <p>SQLModelCrud - FastAPI-Amis-Admin</p> </li> <li> <p>Table \u8868\u683c (gitee.io)</p> </li> </ul> <p>About fastapi_amis_admin and django-admin</p> <p>django-admin is a very mature and powerful web management background tool, users who use django should often use it, But he is not suitable for non-django projects, which is one of the main reasons why fastapi_amis_admin was born.</p> <p>Fastapi_amis_admin has more extensions and functions than django-admin, but fastapi_amis_admin is still in the growth stage, many functions are immature, and need long-term continuous improvement and upgrading. I look forward to your participation in fastapi_amis_admin, contribute code to the project, or provide suggestions.</p>"},{"location":"tutorials/basic/PageAdmin/","title":"Page Management","text":"<p><code>fastapi-amis-admin</code> supports many types of page management, allowing you to implement almost any complex backend page management scenario.</p> <ul> <li>The examples in this tutorial all default to you having completed the first step quickstart. That is: have defined the management site object <code>site</code> and successfully run the project.</li> <li>If your registered administrative object is not displayed, please check if you have imported the corresponding module before <code>site.mount_app(app)</code>.</li> </ul>"},{"location":"tutorials/basic/PageAdmin/#page-management_1","title":"Page Management","text":"<p><code>PageAdmin</code> implements to display a menu in the menu list. Clicking on the menu will display an <code>amis</code> page. You can read the <code>baidu-amis</code> official documentation to implement various complex page displays. First look at a Hello World page example it .</p> <pre><code>@site.register_admin\nclass HelloWorldPageAdmin(admin.PageAdmin):\n    page_schema = 'Hello World Page'\n    # Configure page information directly through the page class property;\n    page = Page(title='Title', body='Hello World!')\n</code></pre> <p>Very simple, right, then implement a page to get the current time.</p> <pre><code>@site.register_admin\nclass CurrentTimePageAdmin(admin.PageAdmin):\n    page_schema = 'Current Time Page'\n\n    # Get page information dynamically via get_page class method.\n    async def get_page(self, request: Request) -&gt; Page:\n        page = await super().get_page(request)\n        page.body = 'The current time is: ' + time.strftime('%Y-%m-%d %H:%M:%S')\n        return page\n</code></pre> <p>In this example, instead of configuring static page information through the <code>page</code> object, the information is obtained dynamically through the <code>get_page</code> method, There are many similar implementations in <code>fastapi-amis-admin</code>, if you need to dynamically configure certain information, It is recommended that you do this by overloading the corresponding methods, but it is recommended that in most cases, please call the methods of the parent class first.</p> <p>Register admin page with Amis syntax compliant Json</p> <pre><code>@site.register_admin\nclass AmisPageAdmin(admin.PageAdmin):\n    page_schema = 'Amis Json Page'\n    page = Page.parse_obj(\n        {\n            \"type\": \"page\",\n            \"title\": \"form page\",\n            \"body\": {\n                \"type\": \"form\",\n                \"mode\": \"horizontal\",\n                \"api\": \"/saveForm\",\n                \"body\": [\n                    {\n                        \"label\": \"Name\",\n                        \"type\": \"input-text\",\n                        \"name\": \"name\"\n                    },\n                    {\n                        \"label\": \"Email\",\n                        \"type\": \"input-email\",\n                        \"name\": \"email\"\n                    }\n                ]\n            }\n        }\n    )\n</code></pre>"},{"location":"tutorials/basic/PageAdmin/#link-admin","title":"Link Admin","text":"<p><code>LinkAdmin</code> implements a link jumping menu in the menu list. Clicking on the menu will access the set link by opening a new browser tab:</p> <pre><code>from fastapi_amis_admin.admin import admin\nfrom fastapi_amis_admin.amis import PageSchema\n\n\n@site.register_admin\nclass GitHubLinkAdmin(admin.LinkAdmin):\n    # Set the page menu information via the page_schema class property;\n    # PageSchema component support properties reference: https://baidu.gitee.io/amis/zh-CN/components/app\n    page_schema = PageSchema(label='AmisLinkAdmin', icon='fa fa-github')\n    # Set the jump link\n    link = 'https://github.com/amisadmin/fastapi_amis_admin'\n</code></pre> <p>The above example is a simple page admin class, which does the following steps. 1:</p> <ol> <li>Define a page admin class, inheriting from <code>admin.LinkAdmin</code>. About the built-in <code>BaseAdmin</code> base class, see: BaseAdmin</li> <li>configure the menu information through the <code>page_schema</code> field. Here only configure the menu label and icon, you can read the relevant documentation, configure more custom information. 3.</li> <li>specify the links to jump to via the <code>link</code> field. 2. The last step, you must register the administrative class to the administrative site through the <code>site.register_admin</code> decorator.</li> </ol>"},{"location":"tutorials/basic/PageAdmin/#iframe-admin","title":"Iframe Admin","text":"<p>The <code>IframeAdmin</code> implementation displays a menu in the menu list. Click on the menu will be embedded in the current page through a frame, access to set the link. Usage is very similar to <code>LinkAdmin</code>, the only difference is the way the link is opened.</p> <pre><code>@site.register_admin\nclass ReDocsAdmin(admin.IframeAdmin):\n    # Set page menu information\n    page_schema = PageSchema(label='Redocs', icon='fa fa-book')\n\n    # Set the jump link\n    @property\n    def src(self):\n        return self.app.site.settings.site_url + '/redoc'\n</code></pre> <p>The above example is a more carefully configured <code>IframeAdmin</code> page administration class that does the following:</p> <ol> <li>set the <code>Iframe</code> jump link through the <code>src</code> dynamic field.</li> </ol> <p>about <code>self.app.site.settings.site_url</code></p> <p>means: the root path of the administrative site where the current class instance is located. Seems complicated, but in fact it is very easy to understand and may be useful in future development. It is recommended to read through BaseAdmin to understand the architecture of <code>amis-admin</code> and the common administrative class objects have fields and methods, which will be very useful for future development and application.</p>"},{"location":"tutorials/basic/Settings/","title":"Site configuration","text":"<p><code>AdminSite</code> in the creation of the instance, receive <code>settings</code>, <code>fastapi</code>, <code>engine</code> three basic parameters. Through these three basic parameters, you can already meet most of the custom configuration needs. If you need more personalized configuration, you can inherit the <code>AdminSite</code> class for more rich configuration.</p>"},{"location":"tutorials/basic/Settings/#basic-configuration","title":"Basic configuration","text":"<p><code>settings</code> receives a <code>Settings</code> object, which can be configured whether the current site is open for debugging, mount path, database connection, CDN address, Amis version number and so on.</p> <ul> <li>Reference: Settings</li> </ul>"},{"location":"tutorials/basic/Settings/#fastapi-application","title":"FastAPI application","text":"<p>The <code>AdminSite</code> object maintains a <code>fastapi</code> application object inside, which you can configure through the <code>fastapi</code> parameter:</p> <ul> <li>whether to enable debugging</li> <li>api document path</li> <li>Start/stop application events</li> <li>Registering dependencies</li> <li>Other FastAPI configurations, refer to: FastAPI</li> </ul>"},{"location":"tutorials/basic/Settings/#database-configuration","title":"Database configuration","text":"<p>The <code>AdminSite</code> object also maintains an internal <code>sqlalchemy</code> asynchronous client, and you can provide a custom asynchronous database engine via the <code>engine</code> parameter.</p>"},{"location":"tutorials/basic/Settings/#example-1","title":"Example-1","text":"<pre><code>from fastapi import FastAPI\nfrom fastapi_amis_admin.admin.settings import Settings\nfrom fastapi_amis_admin.admin.site import AdminSite\n\nsite = AdminSite(\n    # Basic configuration\n    settings=Settings(debug=True, database_url_async='sqlite+aiosqlite:///amisadmin.db'),\n    # fastapi related configuration\n    fastapi=FastAPI(debug=True, docs_url='/admin_docs', redoc_url='/admin_redoc')\n)\n</code></pre>"},{"location":"tutorials/basic/Settings/#customizing-the-admin-site","title":"Customizing the admin site","text":"<p>Admin site rewriting can achieve very free and rich site configuration, such as changing the backend interface template, adding/removing default administrative classes or administrative applications, changing static resource links, etc..</p>"},{"location":"tutorials/basic/Settings/#example-2","title":"Example-2","text":"<pre><code>from fastapi import FastAPI, Request\nfrom fastapi_amis_admin.admin.settings import Settings\nfrom fastapi_amis_admin.admin.site import AdminSite, ReDocsAdmin, DocsAdmin\nfrom sqlalchemy.ext.asyncio import AsyncEngine\nfrom fastapi_amis_admin.amis.components import App\n\n\n# Custom backend administration site\nclass NewAdminSite(AdminSite):\n    # custom application template, copy the original template file to modify the original path: fastapi_amis_admin/amis/templates/app.html\n    template_name = '/templates/new_app.html'\n\n    def __init__(self, settings: Settings, fastapi: FastAPI = None, engine: AsyncEngine = None):\n        super(). __init__(settings, fastapi, engine)\n        # Unregister the default admin class\n        self.unregister_admin(DocsAdmin, ReDocsAdmin)\n\n    async def get_page(self, request: Request) -&gt; App:\n        app = await super().get_page(request)\n        # Custom site name, logo information, reference: https://baidu.gitee.io/amis/zh-CN/components/app\n        app.brandName = 'MyAdminSite'\n        app.logo = 'https://baidu.gitee.io/amis/static/logo_408c434.png'\n        return app\n\n\n# Create a backend management system instance with a custom admin site class\nsite = NewAdminSite(settings=Settings(debug=True, database_url_async='sqlite+aiosqlite:///amisadmin.db'))\n</code></pre> <ul> <li>By modifying the <code>template_name</code> field, you can customize the backend interface template. For example: modify the static resource link to speed up web access, modify the backend display style.</li> </ul> <p>About customizing the admin site</p> <p>Admin site inheritance rewrite is an advanced feature, it is recommended to rewrite only if you know enough about fastapi_amis_admin.</p> <p>You are free to modify the backend administration interface, but please respect the development achievements of fastapi_amis_admin team and show the copyright information about FastAPI-Amis-Admin clearly in the display interface.</p>"},{"location":"tutorials/basic/TemplateAdmin/","title":"Template Management","text":"<p>In some cases, the <code>amis</code> page may not be convenient to achieve your complex interface display, or you prefer to use the template rendering way to display the administrative page. Then you can use <code>TemplateAdmin</code> to achieve your needs.</p>"},{"location":"tutorials/basic/TemplateAdmin/#example","title":"Example","text":"<pre><code>@site.register_admin\nclass SimpleTemplateAdmin(admin:)\n    page_schema = PageSchema(label='SimpleTemplate', icon='fa fa-link')\n    templates: Jinja2Templates = Jinja2Templates(directory='templates')\n    template_name = 'simple.html'\n\n    async def get_page(self, request: Request) -&gt; Dict[str, Any]:\n        return {'current_time': datetime.datetime.now()}\n</code></pre>"},{"location":"tutorials/basic/TemplateAdmin/#configuring-the-template-engine","title":"Configuring the template engine","text":"<p>Configure the Jinja2 template engine via the <code>templates</code> field.</p>"},{"location":"tutorials/basic/TemplateAdmin/#configure-template-files","title":"Configure template files","text":"<p>Configure the Jinja2 template file via the <code>template_name</code> field.</p>"},{"location":"tutorials/basic/TemplateAdmin/#page-rendering-data","title":"Page rendering data","text":"<p>Get page rendering data via the <code>get_page</code> method.</p>"},{"location":"tutorials/basic/TemplateAdmin/#more-usage","title":"More usage","text":""},{"location":"tutorials/basic/TemplateAdmin/#related-documentation","title":"Related documentation","text":"<ul> <li> <p>TemplateAdmin</p> </li> <li> <p>fastapi_amis_admin_demo</p> </li> </ul>"},{"location":"tutorials/basic/_more/","title":"More to be added...","text":""},{"location":"tutorials/basic/i18n/","title":"Multi-language","text":"<p>The multilingual support of <code>FastAPI-Amis-Admin</code> is divided into multilingual for the internal components of <code>Amis</code> on the front end and multilingual for the constant text on the back end.</p> <ul> <li>The default built-in support languages are: <code>en_US</code>, <code>zh_CN</code>. For other language extensions, please refer to Amis Multilanguage.</li> <li>From version 0.1.1 onwards, try setting the environment variable <code>LANGUAGE</code>/<code>LANG</code> &gt; OS default language &gt; English <code>en_US</code>.</li> <li>You can freely switch the language by adding the following code to the top of the project entry file. For example:</li> </ul> <pre><code>from fastapi_amis_admin import i18n\ni18n.set_language(language='zh_CN')\n\nfrom fastapi_amis_admin.admin import AdminSite,Settings\n\nfrom fastapi_amis_admin.amis.components import PageSchema\n\n# Create AdminSite instance\nsite = AdminSite(settings=admin.Settings(database_url_async='sqlite+aiosqlite:///amisadmin.db'))\n\n# Register the admin class\n@site.register_admin\nclass GitHubIframeAdmin(admin:)\n    # Set the page menu information\n    page_schema = PageSchema(label='AmisIframeAdmin', icon='fa fa-github')\n    # Set the jump link\n    src = 'https://github.com/amisadmin/fastapi_amis_admin'\n</code></pre>"},{"location":"utils/database/","title":"Database","text":""},{"location":"utils/database/#asyncdatabase","title":"AsyncDatabase","text":"<ul> <li><code>sqlalchemy</code> asynchronous client</li> </ul>"},{"location":"utils/database/#fields","title":"fields","text":""},{"location":"utils/database/#engine","title":"engine","text":""},{"location":"utils/database/#-sqlalchemy-asynchronous-engine","title":"- <code>sqlalchemy</code> asynchronous engine.","text":"<p>Reference: Asynchronous I/O (asyncio) \u2014 SQLAlchemy 1.4 Documentation</p> <ul> <li>Example:</li> </ul> <pre><code>from sqlalchemy.ext.asyncio import create_async_engine\n\nengine = create_async_engine(\"sqlite+aiosqlite:///amisadmin.db\", future=True)\n# engine = create_async_engine(\"mysql+aiomysql://amisadmin:amisadmin@127.0.0.1:3306/amisadmin?charset=utf8mb4\", future=True)\n# engine = create_async_engine(\"postgresql+asyncpg://user:pass@host/dbname\", future=True)\n</code></pre>"},{"location":"utils/database/#session_maker","title":"session_maker","text":"<pre><code>self.session_maker: sessionmaker = sessionmaker(self.async_engine, class_=AsyncSession, autoflush=False)\n</code></pre>"},{"location":"utils/database/#method","title":"method:","text":""},{"location":"utils/database/#session_generator","title":"session_generator","text":"<pre><code>async def session_generator(self) -&gt; AsyncGenerator[AsyncSession, Any]:\n    async with self.session_maker() as session:\n        yield session\n</code></pre>"},{"location":"utils/database/#database","title":"Database","text":"<ul> <li><code>sqlalchemy</code> sync client</li> </ul>"},{"location":"utils/database/#fields_1","title":"fields","text":""},{"location":"utils/database/#engine_1","title":"engine","text":"<ul> <li><code>sqlalchemy</code> synchronization engine.</li> </ul> <p>Reference: Establishing Connectivity - the Engine \u2014 SQLAlchemy 1.4 Documentation</p> <ul> <li>Example:</li> </ul> <pre><code>from sqlalchemy import create_engine\n\nengine = create_engine(\"sqlite+pysqlite:///amisadmin.db\", echo=True, future=True)\n# engine = create_async_engine(\"mysql+pymysql://amisadmin:amisadmin@127.0.0.1:3306/amisadmin?charset=utf8mb4\", future=True)\n# engine = create_async_engine(\"postgresql+psycopg2://user:pass@host/dbname\", future=True)\n</code></pre>"},{"location":"utils/database/#session_maker_1","title":"session_maker","text":"<pre><code>self.session_maker: sessionmaker = sessionmaker(self.async_engine, autoflush=False)\n</code></pre>"},{"location":"utils/database/#method_1","title":"method:","text":""},{"location":"utils/database/#session_generator_1","title":"session_generator","text":"<pre><code>def session_generator(self) -&gt; Generator[Session, Any, None]:\n    with self.session_maker() as session:\n        yield session\n</code></pre>"},{"location":"utils/database/#reference-project","title":"Reference project:","text":"<p>sqlalchemy-database</p>"}]}